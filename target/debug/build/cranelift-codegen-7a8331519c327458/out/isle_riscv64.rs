// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/riscv64/inst.isle
// - src/isa/riscv64/lower.isle
// - /Users/giorgiomartucci/rust_web/target/debug/build/cranelift-codegen-7a8331519c327458/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> u32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_reverse(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_inverse(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_reverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_inverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn u32_to_offset32(&mut self, arg0: u32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn u8_as_i32(&mut self, arg0: u8) -> i32;
    fn has_zbkb(&mut self) -> bool;
    fn has_zba(&mut self) -> bool;
    fn has_zbb(&mut self) -> bool;
    fn has_zbc(&mut self) -> bool;
    fn has_zbs(&mut self) -> bool;
    fn imm(&mut self, arg0: Type, arg1: u64) -> Reg;
    fn imm12_const(&mut self, arg0: i32) -> Imm12;
    fn imm_from_bits(&mut self, arg0: u64) -> Imm12;
    fn imm_from_neg_bits(&mut self, arg0: i64) -> Imm12;
    fn imm12_const_add(&mut self, arg0: i32, arg1: i32) -> Imm12;
    fn imm12_and(&mut self, arg0: Imm12, arg1: i32) -> Imm12;
    fn neg_imm12(&mut self, arg0: Imm12) -> Imm12;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn gen_default_frm(&mut self) -> OptionFloatRoundingMode;
    fn pack_float_rounding_mode(&mut self, arg0: &FRM) -> OptionFloatRoundingMode;
    fn gen_shamt(&mut self, arg0: Type, arg1: Reg) -> ValueRegs;
    fn gen_amode(&mut self, arg0: Reg, arg1: Offset32, arg2: Type) -> AMode;
    fn offset32_imm(&mut self, arg0: i32) -> Offset32;
    fn default_memflags(&mut self) -> MemFlags;
    fn offset32_add(&mut self, arg0: Offset32, arg1: i64) -> Offset32;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn atomic_amo(&mut self) -> AMO;
    fn move_f_to_x(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn move_x_to_f(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn gen_stack_addr(&mut self, arg0: StackSlot, arg1: Offset32) -> Reg;
    fn gen_move2(&mut self, arg0: Reg, arg1: Type, arg2: Type) -> Reg;
    fn gen_moves(&mut self, arg0: ValueRegs, arg1: Type, arg2: Type) -> ValueRegs;
    fn gen_select_reg(&mut self, arg0: &IntCC, arg1: Reg, arg2: Reg, arg3: Reg, arg4: Reg) -> Reg;
    fn load_u64_constant(&mut self, arg0: u64) -> Reg;
    fn vec_writable_clone(&mut self, arg0: &VecWritableReg) -> VecWritableReg;
    fn vec_writable_to_regs(&mut self, arg0: &VecWritableReg) -> ValueRegs;
    fn alloc_vec_writable(&mut self, arg0: Type) -> VecWritableReg;
    fn load_op(&mut self, arg0: Type) -> LoadOP;
    fn store_op(&mut self, arg0: Type) -> StoreOP;
    fn load_ext_name(&mut self, arg0: ExternalName, arg1: i64) -> Reg;
    fn int_convert_2_float_op(&mut self, arg0: Type, arg1: bool, arg2: Type) -> FpuOPRR;
    fn inst_output_get(&mut self, arg0: InstOutput, arg1: u8) -> ValueRegs;
    fn label_to_br_target(&mut self, arg0: MachLabel) -> BranchTarget;
    fn vec_label_get(&mut self, arg0: &VecMachLabel, arg1: u8) -> MachLabel;
    fn lower_br_icmp(
        &mut self,
        arg0: &IntCC,
        arg1: ValueRegs,
        arg2: ValueRegs,
        arg3: &VecMachLabel,
        arg4: Type,
    ) -> Unit;
    fn int_zero_reg(&mut self, arg0: Type) -> ValueRegs;
    fn lower_cond_br(
        &mut self,
        arg0: &IntCC,
        arg1: ValueRegs,
        arg2: &VecMachLabel,
        arg3: Type,
    ) -> Unit;
    fn intcc_to_extend_op(&mut self, arg0: &IntCC) -> ExtendOp;
    fn lower_br_table(&mut self, arg0: Reg, arg1: &VecMachLabel) -> Unit;
    fn load_ra(&mut self) -> Reg;
    fn shift_int_to_most_significant(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn fp_reg(&mut self) -> PReg;
    fn sp_reg(&mut self) -> PReg;
    fn zero_reg(&mut self) -> Reg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn int_compare(&mut self, arg0: &IntCC, arg1: Reg, arg2: Reg) -> IntegerCompare;
    fn is_atomic_rmw_max_etc(&mut self, arg0: &AtomicRmwOp) -> Option<(AtomicRmwOp, bool)>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 282.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 324.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 346.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/riscv64/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    Lui {
        rd: WritableReg,
        imm: Imm20,
    },
    LoadConst32 {
        rd: WritableReg,
        imm: u32,
    },
    LoadConst64 {
        rd: WritableReg,
        imm: u64,
    },
    Auipc {
        rd: WritableReg,
        imm: Imm20,
    },
    FpuRR {
        alu_op: FpuOPRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs: Reg,
    },
    AluRRR {
        alu_op: AluOPRRR,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRR {
        alu_op: FpuOPRRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRRR {
        alu_op: FpuOPRRRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        rs3: Reg,
    },
    AluRRImm12 {
        alu_op: AluOPRRI,
        rd: WritableReg,
        rs: Reg,
        imm12: Imm12,
    },
    Load {
        rd: WritableReg,
        op: LoadOP,
        flags: MemFlags,
        from: AMode,
    },
    Store {
        to: AMode,
        op: StoreOP,
        flags: MemFlags,
        src: Reg,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        rets: VecRetPair,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    AjustSp {
        amount: i64,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    TrapIf {
        test: Reg,
        trap_code: TrapCode,
    },
    TrapIfC {
        rs1: Reg,
        rs2: Reg,
        cc: IntCC,
        trap_code: TrapCode,
    },
    Jal {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: IntegerCompare,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    VirtualSPOffsetAdj {
        amount: i64,
    },
    Mov {
        rd: WritableReg,
        rm: Reg,
        ty: Type,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Fence {
        pred: u8,
        succ: u8,
    },
    FenceI,
    ECall,
    EBreak,
    Udf {
        trap_code: TrapCode,
    },
    Jalr {
        rd: WritableReg,
        base: Reg,
        offset: Imm12,
    },
    Atomic {
        op: AtomicOP,
        rd: WritableReg,
        addr: Reg,
        src: Reg,
        amo: AMO,
    },
    AtomicStore {
        src: Reg,
        ty: Type,
        p: Reg,
    },
    AtomicLoad {
        rd: WritableReg,
        ty: Type,
        p: Reg,
    },
    AtomicRmwLoop {
        offset: Reg,
        op: AtomicRmwOp,
        dst: WritableReg,
        ty: Type,
        p: Reg,
        x: Reg,
        t0: WritableReg,
    },
    Select {
        dst: VecWritableReg,
        ty: Type,
        condition: Reg,
        x: ValueRegs,
        y: ValueRegs,
    },
    BrTable {
        index: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        targets: VecBranchTarget,
    },
    AtomicCas {
        offset: Reg,
        t0: WritableReg,
        dst: WritableReg,
        e: Reg,
        addr: Reg,
        v: Reg,
        ty: Type,
    },
    IntSelect {
        op: IntSelectOP,
        dst: VecWritableReg,
        x: ValueRegs,
        y: ValueRegs,
        ty: Type,
    },
    Csr {
        csr_op: CsrOP,
        rd: WritableReg,
        rs: OptionReg,
        imm: OptionUimm5,
        csr: CsrAddress,
    },
    Icmp {
        cc: IntCC,
        rd: WritableReg,
        a: ValueRegs,
        b: ValueRegs,
        ty: Type,
    },
    SelectReg {
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        condition: IntegerCompare,
    },
    FcvtToInt {
        is_sat: bool,
        rd: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        is_signed: bool,
        in_type: Type,
        out_type: Type,
    },
    SelectIf {
        if_spectre_guard: bool,
        rd: VecWritableReg,
        test: Reg,
        x: ValueRegs,
        y: ValueRegs,
    },
    RawData {
        data: VecU8,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    FloatRound {
        op: FloatRoundOP,
        rd: WritableReg,
        int_tmp: WritableReg,
        f_tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    FloatSelect {
        op: FloatSelectOP,
        rd: WritableReg,
        tmp: WritableReg,
        rs1: Reg,
        rs2: Reg,
        ty: Type,
    },
    FloatSelectPseudo {
        op: FloatSelectOP,
        rd: WritableReg,
        tmp: WritableReg,
        rs1: Reg,
        rs2: Reg,
        ty: Type,
    },
    Popcnt {
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Cltz {
        leading: bool,
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Rev8 {
        rs: Reg,
        step: WritableReg,
        tmp: WritableReg,
        rd: WritableReg,
    },
    Brev8 {
        rs: Reg,
        ty: Type,
        step: WritableReg,
        tmp: WritableReg,
        tmp2: WritableReg,
        rd: WritableReg,
    },
    StackProbeLoop {
        guard_size: u32,
        probe_count: u32,
        tmp: WritableReg,
    },
}

/// Internal type FloatSelectOP: defined at src/isa/riscv64/inst.isle line 340.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatSelectOP {
    Max,
    Min,
}

/// Internal type FloatRoundOP: defined at src/isa/riscv64/inst.isle line 345.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatRoundOP {
    Nearest,
    Ceil,
    Floor,
    Trunc,
}

/// Internal type CsrOP: defined at src/isa/riscv64/inst.isle line 352.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrOP {
    Csrrw,
    Csrrs,
    Csrrc,
    Csrrwi,
    Csrrsi,
    Csrrci,
}

/// Internal type IntSelectOP: defined at src/isa/riscv64/inst.isle line 361.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntSelectOP {
    Smax,
    Umax,
    Smin,
    Umin,
}

/// Internal type AtomicOP: defined at src/isa/riscv64/inst.isle line 368.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicOP {
    LrW,
    ScW,
    AmoswapW,
    AmoaddW,
    AmoxorW,
    AmoandW,
    AmoorW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    LrD,
    ScD,
    AmoswapD,
    AmoaddD,
    AmoxorD,
    AmoandD,
    AmoorD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
}

/// Internal type FpuOPRRRR: defined at src/isa/riscv64/inst.isle line 393.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRRR {
    FmaddS,
    FmsubS,
    FnmsubS,
    FnmaddS,
    FmaddD,
    FmsubD,
    FnmsubD,
    FnmaddD,
}

/// Internal type FClassResult: defined at src/isa/riscv64/inst.isle line 406.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FClassResult {
    NegInfinite,
    NegNormal,
    NegSubNormal,
    NegZero,
    PosZero,
    PosSubNormal,
    PosNormal,
    PosInfinite,
    SNaN,
    QNaN,
}

/// Internal type FpuOPRR: defined at src/isa/riscv64/inst.isle line 429.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRR {
    FsqrtS,
    FcvtWS,
    FcvtWuS,
    FmvXW,
    FclassS,
    FcvtSw,
    FcvtSwU,
    FmvWX,
    FcvtLS,
    FcvtLuS,
    FcvtSL,
    FcvtSLU,
    FcvtLD,
    FcvtLuD,
    FmvXD,
    FcvtDL,
    FcvtDLu,
    FmvDX,
    FsqrtD,
    FcvtSD,
    FcvtDS,
    FclassD,
    FcvtWD,
    FcvtWuD,
    FcvtDW,
    FcvtDWU,
}

/// Internal type LoadOP: defined at src/isa/riscv64/inst.isle line 469.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LoadOP {
    Lb,
    Lh,
    Lw,
    Lbu,
    Lhu,
    Lwu,
    Ld,
    Flw,
    Fld,
}

/// Internal type StoreOP: defined at src/isa/riscv64/inst.isle line 481.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum StoreOP {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsw,
    Fsd,
}

/// Internal type AluOPRRR: defined at src/isa/riscv64/inst.isle line 490.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRR {
    Add,
    Sub,
    Sll,
    Slt,
    SltU,
    Sgt,
    Sgtu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    DivU,
    Rem,
    RemU,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    Adduw,
    Sh1add,
    Sh1adduw,
    Sh2add,
    Sh2adduw,
    Sh3add,
    Sh3adduw,
    Andn,
    Orn,
    Xnor,
    Max,
    Maxu,
    Min,
    Minu,
    Rol,
    Rolw,
    Ror,
    Rorw,
    Bclr,
    Bext,
    Binv,
    Bset,
    Clmul,
    Clmulh,
    Clmulr,
    Pack,
    Packw,
    Packh,
}

/// Internal type FpuOPRRR: defined at src/isa/riscv64/inst.isle line 570.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRR {
    FaddS,
    FsubS,
    FmulS,
    FdivS,
    FsgnjS,
    FsgnjnS,
    FsgnjxS,
    FminS,
    FmaxS,
    FeqS,
    FltS,
    FleS,
    FaddD,
    FsubD,
    FmulD,
    FdivD,
    FsgnjD,
    FsgnjnD,
    FsgnjxD,
    FminD,
    FmaxD,
    FeqD,
    FltD,
    FleD,
}

/// Internal type AluOPRRI: defined at src/isa/riscv64/inst.isle line 603.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRI {
    Addi,
    Slti,
    SltiU,
    Xori,
    Ori,
    Andi,
    Slli,
    Srli,
    Srai,
    Addiw,
    Slliw,
    SrliW,
    Sraiw,
    SlliUw,
    Clz,
    Clzw,
    Ctz,
    Ctzw,
    Cpop,
    Cpopw,
    Sextb,
    Sexth,
    Zexth,
    Rori,
    Roriw,
    Rev8,
    Brev8,
    Orcb,
    Bclri,
    Bexti,
    Binvi,
    Bseti,
}

/// Internal type FRM: defined at src/isa/riscv64/inst.isle line 646.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FRM {
    RNE,
    RTZ,
    RDN,
    RUP,
    RMM,
    Fcsr,
}

/// Internal type FFlagsException: defined at src/isa/riscv64/inst.isle line 662.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FFlagsException {
    NV,
    DZ,
    OF,
    UF,
    NX,
}

/// Internal type FenceFm: defined at src/isa/riscv64/inst.isle line 681.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FenceFm {
    None,
    Tso,
}

/// Internal type ExtendOp: defined at src/isa/riscv64/inst.isle line 1533.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendOp {
    Zero,
    Signed,
}

/// Internal type CmpResult: defined at src/isa/riscv64/inst.isle line 2587.
#[derive(Clone, Debug)]
pub enum CmpResult {
    Result { result: Reg, invert: bool },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 55.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 59.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 79.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 128.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 139.
    return v3;
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 292.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 294.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 297.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 291"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 305.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 310.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 312.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 314.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 309"
    )
}

// Generated as internal constructor for term produces_flags_append.
pub fn constructor_produces_flags_append<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &MInst,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        let v3 = ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: v1.clone(),
            inst2: arg1.clone(),
        };
        // Rule at src/prelude_lower.isle line 339.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_append", "src/prelude_lower.isle line 338"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 364.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 365.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 363"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 370.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 372.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 369"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 385.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 379.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 378"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 416.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 422.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 434.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 450.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 457.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 470.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 410.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 402.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 400"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 488.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 495.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 506.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 511.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 516.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 521.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 526.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 504"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: Range,
    arg1: ValueSlice,
) -> InstOutput {
    let v2 = C::gen_return(ctx, arg1);
    let v3 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 715.
    return v3;
}

// Generated as internal constructor for term convert_valueregs_reg.
pub fn constructor_convert_valueregs_reg<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Reg {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    // Rule at src/isa/riscv64/inst.isle line 714.
    return v2;
}

// Generated as internal constructor for term gen_float_round.
pub fn constructor_gen_float_round<C: Context>(
    ctx: &mut C,
    arg0: &FloatRoundOP,
    arg1: Reg,
    arg2: Type,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg2);
    let v5 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, F64);
    let v8 = MInst::FloatRound {
        op: arg0.clone(),
        rd: v3,
        int_tmp: v5,
        f_tmp: v7,
        rs: arg1,
        ty: arg2,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 738.
    return v10;
}

// Generated as internal constructor for term gen_float_select_pseudo.
pub fn constructor_gen_float_select_pseudo<C: Context>(
    ctx: &mut C,
    arg0: &FloatSelectOP,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg3);
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = MInst::FloatSelectPseudo {
        op: arg0.clone(),
        rd: v4,
        tmp: v6,
        rs1: arg1,
        rs2: arg2,
        ty: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 748.
    return v9;
}

// Generated as internal constructor for term gen_float_select.
pub fn constructor_gen_float_select<C: Context>(
    ctx: &mut C,
    arg0: &FloatSelectOP,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg3);
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = MInst::FloatSelect {
        op: arg0.clone(),
        rd: v4,
        tmp: v6,
        rs1: arg1,
        rs2: arg2,
        ty: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 757.
    return v9;
}

// Generated as internal constructor for term rv_add.
pub fn constructor_rv_add<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Add, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 772.
    return v3;
}

// Generated as internal constructor for term rv_addi.
pub fn constructor_rv_addi<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 778.
    return v3;
}

// Generated as internal constructor for term rv_sub.
pub fn constructor_rv_sub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 784.
    return v3;
}

// Generated as internal constructor for term rv_neg.
pub fn constructor_rv_neg<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = C::zero_reg(ctx);
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v2, arg0);
    // Rule at src/isa/riscv64/inst.isle line 790.
    return v3;
}

// Generated as internal constructor for term rv_sll.
pub fn constructor_rv_sll<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 796.
    return v3;
}

// Generated as internal constructor for term rv_slli.
pub fn constructor_rv_slli<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slli, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 802.
    return v3;
}

// Generated as internal constructor for term rv_srl.
pub fn constructor_rv_srl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 808.
    return v3;
}

// Generated as internal constructor for term rv_srli.
pub fn constructor_rv_srli<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 814.
    return v3;
}

// Generated as internal constructor for term rv_sra.
pub fn constructor_rv_sra<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 820.
    return v3;
}

// Generated as internal constructor for term rv_srai.
pub fn constructor_rv_srai<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srai, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 826.
    return v3;
}

// Generated as internal constructor for term rv_or.
pub fn constructor_rv_or<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Or, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 832.
    return v3;
}

// Generated as internal constructor for term rv_ori.
pub fn constructor_rv_ori<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Ori, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 838.
    return v3;
}

// Generated as internal constructor for term rv_xor.
pub fn constructor_rv_xor<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Xor, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 844.
    return v3;
}

// Generated as internal constructor for term rv_xori.
pub fn constructor_rv_xori<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Xori, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 850.
    return v3;
}

// Generated as internal constructor for term rv_not.
pub fn constructor_rv_not<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = C::imm12_const(ctx, -0x1);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 856.
    return v3;
}

// Generated as internal constructor for term rv_and.
pub fn constructor_rv_and<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::And, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 862.
    return v3;
}

// Generated as internal constructor for term rv_andi.
pub fn constructor_rv_andi<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Andi, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 868.
    return v3;
}

// Generated as internal constructor for term rv_sltu.
pub fn constructor_rv_sltu<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::SltU, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 874.
    return v3;
}

// Generated as internal constructor for term rv_sltiu.
pub fn constructor_rv_sltiu<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SltiU, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 880.
    return v3;
}

// Generated as internal constructor for term rv_seqz.
pub fn constructor_rv_seqz<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = C::imm12_const(ctx, 0x1);
    let v3 = constructor_rv_sltiu(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 886.
    return v3;
}

// Generated as internal constructor for term rv_addw.
pub fn constructor_rv_addw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Addw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 896.
    return v3;
}

// Generated as internal constructor for term rv_addiw.
pub fn constructor_rv_addiw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addiw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 902.
    return v3;
}

// Generated as internal constructor for term rv_sextw.
pub fn constructor_rv_sextw<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = C::imm12_const(ctx, 0x0);
    let v3 = constructor_rv_addiw(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 908.
    return v3;
}

// Generated as internal constructor for term rv_subw.
pub fn constructor_rv_subw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Subw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 914.
    return v3;
}

// Generated as internal constructor for term rv_sllw.
pub fn constructor_rv_sllw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Sllw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 920.
    return v3;
}

// Generated as internal constructor for term rv_slliw.
pub fn constructor_rv_slliw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slliw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 926.
    return v3;
}

// Generated as internal constructor for term rv_srlw.
pub fn constructor_rv_srlw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Srlw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 932.
    return v3;
}

// Generated as internal constructor for term rv_srliw.
pub fn constructor_rv_srliw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SrliW, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 938.
    return v3;
}

// Generated as internal constructor for term rv_sraw.
pub fn constructor_rv_sraw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Sraw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 944.
    return v3;
}

// Generated as internal constructor for term rv_sraiw.
pub fn constructor_rv_sraiw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sraiw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 950.
    return v3;
}

// Generated as internal constructor for term rv_mul.
pub fn constructor_rv_mul<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 960.
    return v3;
}

// Generated as internal constructor for term rv_mulh.
pub fn constructor_rv_mulh<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Mulh, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 966.
    return v3;
}

// Generated as internal constructor for term rv_mulhu.
pub fn constructor_rv_mulhu<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Mulhu, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 972.
    return v3;
}

// Generated as internal constructor for term rv_div.
pub fn constructor_rv_div<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Div, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 978.
    return v3;
}

// Generated as internal constructor for term rv_divu.
pub fn constructor_rv_divu<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::DivU, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 984.
    return v3;
}

// Generated as internal constructor for term rv_rem.
pub fn constructor_rv_rem<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Rem, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 990.
    return v3;
}

// Generated as internal constructor for term rv_remu.
pub fn constructor_rv_remu<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::RemU, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 996.
    return v3;
}

// Generated as internal constructor for term rv_mulw.
pub fn constructor_rv_mulw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Mulw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1007.
    return v3;
}

// Generated as internal constructor for term rv_divw.
pub fn constructor_rv_divw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Divw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1013.
    return v3;
}

// Generated as internal constructor for term rv_divuw.
pub fn constructor_rv_divuw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Divuw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1019.
    return v3;
}

// Generated as internal constructor for term rv_remw.
pub fn constructor_rv_remw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Remw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1025.
    return v3;
}

// Generated as internal constructor for term rv_remuw.
pub fn constructor_rv_remuw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Remuw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1031.
    return v3;
}

// Generated as internal constructor for term rv_fadd.
pub fn constructor_rv_fadd<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddS, F32, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1040.
            return v5;
        }
        F64 => {
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddD, F64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1041.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fadd", "src/isa/riscv64/inst.isle line 1039"
    )
}

// Generated as internal constructor for term rv_fsub.
pub fn constructor_rv_fsub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubS, F32, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1045.
            return v5;
        }
        F64 => {
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubD, F64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1046.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsub", "src/isa/riscv64/inst.isle line 1044"
    )
}

// Generated as internal constructor for term rv_fmul.
pub fn constructor_rv_fmul<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulS, F32, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1050.
            return v5;
        }
        F64 => {
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulD, F64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1051.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmul", "src/isa/riscv64/inst.isle line 1049"
    )
}

// Generated as internal constructor for term rv_fdiv.
pub fn constructor_rv_fdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivS, F32, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1055.
            return v5;
        }
        F64 => {
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivD, F64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1056.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fdiv", "src/isa/riscv64/inst.isle line 1054"
    )
}

// Generated as internal constructor for term rv_fsqrt.
pub fn constructor_rv_fsqrt<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtS, F32, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1060.
            return v4;
        }
        F64 => {
            let v7 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtD, F64, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1061.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsqrt", "src/isa/riscv64/inst.isle line 1059"
    )
}

// Generated as internal constructor for term rv_fmadd.
pub fn constructor_rv_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddS, F32, arg1, arg2, arg3);
            // Rule at src/isa/riscv64/inst.isle line 1065.
            return v6;
        }
        F64 => {
            let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddD, F64, arg1, arg2, arg3);
            // Rule at src/isa/riscv64/inst.isle line 1066.
            return v9;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmadd", "src/isa/riscv64/inst.isle line 1064"
    )
}

// Generated as internal constructor for term rv_fcvtds.
pub fn constructor_rv_fcvtds<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDS, F32, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1070.
    return v3;
}

// Generated as internal constructor for term rv_fcvtsd.
pub fn constructor_rv_fcvtsd<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSD, F64, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1074.
    return v3;
}

// Generated as internal constructor for term rv_fsgnj.
pub fn constructor_rv_fsgnj<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjS, F32, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1080.
            return v5;
        }
        F64 => {
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjD, F64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1081.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnj", "src/isa/riscv64/inst.isle line 1079"
    )
}

// Generated as internal constructor for term rv_fsgnjn.
pub fn constructor_rv_fsgnjn<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnS, F32, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1087.
            return v5;
        }
        F64 => {
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnD, F64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1088.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjn", "src/isa/riscv64/inst.isle line 1086"
    )
}

// Generated as internal constructor for term rv_fneg.
pub fn constructor_rv_fneg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = constructor_rv_fsgnjn(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1093.
    return v2;
}

// Generated as internal constructor for term rv_fsgnjx.
pub fn constructor_rv_fsgnjx<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxS, F32, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1099.
            return v5;
        }
        F64 => {
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxD, F64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1100.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjx", "src/isa/riscv64/inst.isle line 1098"
    )
}

// Generated as internal constructor for term rv_fabs.
pub fn constructor_rv_fabs<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = constructor_rv_fsgnjx(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1105.
    return v2;
}

// Generated as internal constructor for term rv_feq.
pub fn constructor_rv_feq<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqS, I64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1109.
            return v5;
        }
        F64 => {
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqD, I64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1110.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_feq", "src/isa/riscv64/inst.isle line 1108"
    )
}

// Generated as internal constructor for term rv_flt.
pub fn constructor_rv_flt<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltS, I64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1114.
            return v5;
        }
        F64 => {
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltD, I64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1115.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_flt", "src/isa/riscv64/inst.isle line 1113"
    )
}

// Generated as internal constructor for term rv_fle.
pub fn constructor_rv_fle<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleS, I64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1119.
            return v5;
        }
        F64 => {
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleD, I64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1120.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fle", "src/isa/riscv64/inst.isle line 1118"
    )
}

// Generated as internal constructor for term rv_fgt.
pub fn constructor_rv_fgt<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_rv_flt(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1125.
    return v3;
}

// Generated as internal constructor for term rv_fge.
pub fn constructor_rv_fge<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_rv_fle(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1130.
    return v3;
}

// Generated as internal constructor for term rv_adduw.
pub fn constructor_rv_adduw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Adduw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1138.
    return v3;
}

// Generated as internal constructor for term rv_zextw.
pub fn constructor_rv_zextw<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v1 = C::zero_reg(ctx);
    let v2 = constructor_rv_adduw(ctx, arg0, v1);
    // Rule at src/isa/riscv64/inst.isle line 1145.
    return v2;
}

// Generated as internal constructor for term rv_slliuw.
pub fn constructor_rv_slliuw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SlliUw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1151.
    return v3;
}

// Generated as internal constructor for term rv_andn.
pub fn constructor_rv_andn<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Andn, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1160.
    return v3;
}

// Generated as internal constructor for term rv_orn.
pub fn constructor_rv_orn<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Orn, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1166.
    return v3;
}

// Generated as internal constructor for term rv_clz.
pub fn constructor_rv_clz<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clz, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1171.
    return v2;
}

// Generated as internal constructor for term rv_clzw.
pub fn constructor_rv_clzw<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clzw, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1176.
    return v2;
}

// Generated as internal constructor for term rv_ctz.
pub fn constructor_rv_ctz<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctz, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1181.
    return v2;
}

// Generated as internal constructor for term rv_ctzw.
pub fn constructor_rv_ctzw<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctzw, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1186.
    return v2;
}

// Generated as internal constructor for term rv_cpop.
pub fn constructor_rv_cpop<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpop, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1191.
    return v2;
}

// Generated as internal constructor for term rv_max.
pub fn constructor_rv_max<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Max, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1196.
    return v3;
}

// Generated as internal constructor for term rv_sextb.
pub fn constructor_rv_sextb<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = C::imm12_const(ctx, 0x0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sextb, arg0, v3);
    // Rule at src/isa/riscv64/inst.isle line 1201.
    return v4;
}

// Generated as internal constructor for term rv_sexth.
pub fn constructor_rv_sexth<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = C::imm12_const(ctx, 0x0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sexth, arg0, v3);
    // Rule at src/isa/riscv64/inst.isle line 1206.
    return v4;
}

// Generated as internal constructor for term rv_zexth.
pub fn constructor_rv_zexth<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = C::imm12_const(ctx, 0x0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Zexth, arg0, v3);
    // Rule at src/isa/riscv64/inst.isle line 1211.
    return v4;
}

// Generated as internal constructor for term rv_rol.
pub fn constructor_rv_rol<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Rol, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1216.
    return v3;
}

// Generated as internal constructor for term rv_rolw.
pub fn constructor_rv_rolw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Rolw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1221.
    return v3;
}

// Generated as internal constructor for term rv_ror.
pub fn constructor_rv_ror<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Ror, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1226.
    return v3;
}

// Generated as internal constructor for term rv_rorw.
pub fn constructor_rv_rorw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Rorw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1231.
    return v3;
}

// Generated as internal constructor for term rv_rev8.
pub fn constructor_rv_rev8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Rev8, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1236.
    return v2;
}

// Generated as internal constructor for term rv_brev8.
pub fn constructor_rv_brev8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Brev8, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1244.
    return v2;
}

// Generated as internal constructor for term rv_bseti.
pub fn constructor_rv_bseti<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> Reg {
    let v3 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bseti, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1249.
    return v3;
}

// Generated as internal constructor for term rv_pack.
pub fn constructor_rv_pack<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Pack, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1257.
    return v3;
}

// Generated as internal constructor for term rv_packw.
pub fn constructor_rv_packw<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Packw, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1262.
    return v3;
}

// Generated as internal constructor for term imm12_zero.
pub fn constructor_imm12_zero<C: Context>(ctx: &mut C) -> Imm12 {
    let v1 = C::imm12_const(ctx, 0x0);
    // Rule at src/isa/riscv64/inst.isle line 1276.
    return v1;
}

// Generated as internal constructor for term load_imm12.
pub fn constructor_load_imm12<C: Context>(ctx: &mut C, arg0: i32) -> Reg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::imm12_const(ctx, arg0);
    let v3 = constructor_rv_addi(ctx, v1, v2);
    // Rule at src/isa/riscv64/inst.isle line 1284.
    return v3;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(ctx: &mut C, arg0: &FpuOPRR, arg1: Type, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg1);
    let v4 = C::gen_default_frm(ctx);
    let v5 = MInst::FpuRR {
        alu_op: arg0.clone(),
        frm: v4,
        rd: v3,
        rs: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1324.
    return v7;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(ctx: &mut C, arg0: &AluOPRRR, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::AluRRR {
        alu_op: arg0.clone(),
        rd: v4,
        rs1: arg1,
        rs2: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1331.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRR,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg1);
    let v5 = C::gen_default_frm(ctx);
    let v6 = MInst::FpuRRR {
        alu_op: arg0.clone(),
        frm: v5,
        rd: v4,
        rs1: arg2,
        rs2: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1342.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRRR,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg1);
    let v6 = C::gen_default_frm(ctx);
    let v7 = MInst::FpuRRRR {
        alu_op: arg0.clone(),
        frm: v6,
        rd: v5,
        rs1: arg2,
        rs2: arg3,
        rs3: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1350.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRI,
    arg1: Reg,
    arg2: Imm12,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v4,
        rs: arg1,
        imm12: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1358.
    return v7;
}

// Generated as internal constructor for term alu_rr_funct12.
pub fn constructor_alu_rr_funct12<C: Context>(ctx: &mut C, arg0: &AluOPRRI, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = constructor_imm12_zero(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v3,
        rs: arg1,
        imm12: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1366.
    return v7;
}

// Generated as internal constructor for term select_addi.
pub fn constructor_select_addi<C: Context>(ctx: &mut C, arg0: Type) -> AluOPRRI {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1372.
        return AluOPRRI::Addiw;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/riscv64/inst.isle line 1373.
        return AluOPRRI::Addi;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_addi", "src/isa/riscv64/inst.isle line 1371"
    )
}

// Generated as internal constructor for term bnot_128.
pub fn constructor_bnot_128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = constructor_rv_not(ctx, v2);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = constructor_rv_not(ctx, v5);
    let v7 = C::value_regs(ctx, v3, v6);
    // Rule at src/isa/riscv64/inst.isle line 1378.
    return v7;
}

// Generated as internal constructor for term lower_bit_reverse.
pub fn constructor_lower_bit_reverse<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    match arg1 {
        I8 => {
            let v3 = constructor_gen_brev8(ctx, arg0, I8);
            // Rule at src/isa/riscv64/inst.isle line 1389.
            return v3;
        }
        I16 => {
            let v5 = constructor_gen_brev8(ctx, arg0, I16);
            let v6 = constructor_gen_rev8(ctx, v5);
            let v8 = C::imm12_const(ctx, 0x30);
            let v9 = constructor_rv_srli(ctx, v6, v8);
            // Rule at src/isa/riscv64/inst.isle line 1393.
            return v9;
        }
        I32 => {
            let v11 = constructor_gen_brev8(ctx, arg0, I32);
            let v12 = constructor_gen_rev8(ctx, v11);
            let v14 = C::imm12_const(ctx, 0x20);
            let v15 = constructor_rv_srli(ctx, v12, v14);
            // Rule at src/isa/riscv64/inst.isle line 1401.
            return v15;
        }
        I64 => {
            let v16 = constructor_gen_rev8(ctx, arg0);
            let v18 = constructor_gen_brev8(ctx, v16, I64);
            // Rule at src/isa/riscv64/inst.isle line 1409.
            return v18;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bit_reverse", "src/isa/riscv64/inst.isle line 1386"
    )
}

// Generated as internal constructor for term lower_ctz.
pub fn constructor_lower_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v6 = C::has_zbb(ctx);
    if v6 == true {
        match arg0 {
            I32 => {
                let v11 = constructor_rv_ctzw(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 1424.
                return v11;
            }
            I64 => {
                let v12 = constructor_rv_ctz(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 1428.
                return v12;
            }
            _ => {}
        }
        let v4 = C::fits_in_16(ctx, arg0);
        if let Some(v5) = v4 {
            let v7 = C::ty_bits(ctx, v5);
            let v8 = C::u8_as_u64(ctx, v7);
            let v9 = constructor_gen_bseti(ctx, arg1, v8);
            let v10 = constructor_rv_ctzw(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 1419.
            return v10;
        }
    }
    let v3 = constructor_gen_cltz(ctx, false, arg1, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1416.
    return v3;
}

// Generated as internal constructor for term lower_ctz_128.
pub fn constructor_lower_ctz_128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = constructor_lower_ctz(ctx, I64, v4);
    let v7 = constructor_lower_ctz(ctx, I64, v2);
    let v9 = C::zero_reg(ctx);
    let v10 = C::zero_reg(ctx);
    let v11 = C::gen_select_reg(ctx, &IntCC::Equal, v2, v9, v6, v10);
    let v12 = constructor_rv_add(ctx, v7, v11);
    let v13 = C::value_reg(ctx, v12);
    let v15 = constructor_zext(ctx, v13, I64, I128);
    // Rule at src/isa/riscv64/inst.isle line 1435.
    return v15;
}

// Generated as internal constructor for term lower_clz.
pub fn constructor_lower_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v6 = C::has_zbb(ctx);
    if v6 == true {
        match arg0 {
            I32 => {
                let v17 = constructor_rv_clzw(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 1458.
                return v17;
            }
            I64 => {
                let v18 = constructor_rv_clz(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 1462.
                return v18;
            }
            _ => {}
        }
        let v4 = C::fits_in_16(ctx, arg0);
        if let Some(v5) = v4 {
            let v7 = C::value_reg(ctx, arg1);
            let v9 = constructor_zext(ctx, v7, v5, I64);
            let v10 = constructor_convert_valueregs_reg(ctx, v9);
            let v11 = constructor_rv_clz(ctx, v10);
            let v12 = C::ty_bits(ctx, v5);
            let v13 = C::u8_as_i32(ctx, v12);
            let v15 = C::imm12_const_add(ctx, v13, -0x40);
            let v16 = constructor_rv_addi(ctx, v11, v15);
            // Rule at src/isa/riscv64/inst.isle line 1450.
            return v16;
        }
    }
    let v3 = constructor_gen_cltz(ctx, true, arg1, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1447.
    return v3;
}

// Generated as internal constructor for term lower_clz_i128.
pub fn constructor_lower_clz_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = constructor_lower_clz(ctx, I64, v4);
    let v7 = constructor_lower_clz(ctx, I64, v2);
    let v9 = C::zero_reg(ctx);
    let v10 = C::zero_reg(ctx);
    let v11 = C::gen_select_reg(ctx, &IntCC::Equal, v4, v9, v7, v10);
    let v12 = constructor_rv_add(ctx, v6, v11);
    let v13 = C::value_reg(ctx, v12);
    let v15 = constructor_zext(ctx, v13, I64, I128);
    // Rule at src/isa/riscv64/inst.isle line 1470.
    return v15;
}

// Generated as internal constructor for term lower_cls.
pub fn constructor_lower_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::value_reg(ctx, arg1);
    let v4 = constructor_ext_int_if_need(ctx, true, v3, arg0);
    let v5 = constructor_convert_valueregs_reg(ctx, v4);
    let v7 = C::zero_reg(ctx);
    let v8 = constructor_rv_not(ctx, v5);
    let v9 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v5, v7, v8, v5);
    let v10 = constructor_lower_clz(ctx, arg0, v9);
    let v12 = C::imm12_const(ctx, -0x1);
    let v13 = constructor_rv_addi(ctx, v10, v12);
    // Rule at src/isa/riscv64/inst.isle line 1483.
    return v13;
}

// Generated as internal constructor for term lower_cls_i128.
pub fn constructor_lower_cls_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::zero_reg(ctx);
    let v7 = constructor_rv_not(ctx, v2);
    let v8 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v4, v6, v7, v2);
    let v9 = C::zero_reg(ctx);
    let v10 = constructor_rv_not(ctx, v4);
    let v11 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v4, v9, v10, v4);
    let v12 = C::value_regs(ctx, v8, v11);
    let v13 = constructor_lower_clz_i128(ctx, v12);
    let v14 = C::value_regs_get(ctx, v13, 0x0);
    let v16 = C::imm12_const(ctx, -0x1);
    let v17 = constructor_rv_addi(ctx, v14, v16);
    let v18 = C::value_reg(ctx, v17);
    let v21 = constructor_zext(ctx, v18, I64, I128);
    // Rule at src/isa/riscv64/inst.isle line 1493.
    return v21;
}

// Generated as internal constructor for term gen_cltz.
pub fn constructor_gen_cltz<C: Context>(ctx: &mut C, arg0: bool, arg1: Reg, arg2: Type) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = MInst::Cltz {
        leading: arg0,
        sum: v6,
        step: v5,
        tmp: v4,
        rs: arg1,
        ty: arg2,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/riscv64/inst.isle line 1505.
    return v9;
}

// Generated as internal constructor for term ext_int_if_need.
pub fn constructor_ext_int_if_need<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: ValueRegs,
    arg2: Type,
) -> ValueRegs {
    match arg2 {
        I64 => {
            // Rule at src/isa/riscv64/inst.isle line 1521.
            return arg1;
        }
        I128 => {
            // Rule at src/isa/riscv64/inst.isle line 1522.
            return arg1;
        }
        _ => {}
    }
    match arg0 {
        true => {
            let v3 = C::fits_in_32(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = C::ty_int(ctx, v4);
                if let Some(v6) = v5 {
                    let v8 = constructor_sext(ctx, arg1, v6, I64);
                    // Rule at src/isa/riscv64/inst.isle line 1516.
                    return v8;
                }
            }
        }
        false => {
            let v3 = C::fits_in_32(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = C::ty_int(ctx, v4);
                if let Some(v6) = v5 {
                    let v9 = constructor_zext(ctx, arg1, v6, I64);
                    // Rule at src/isa/riscv64/inst.isle line 1518.
                    return v9;
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ext_int_if_need", "src/isa/riscv64/inst.isle line 1514"
    )
}

// Generated as internal constructor for term zext.
pub fn constructor_zext<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Type,
    arg2: Type,
) -> ValueRegs {
    let v4 = constructor_extend(ctx, arg0, &ExtendOp::Zero, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 1527.
    return v4;
}

// Generated as internal constructor for term sext.
pub fn constructor_sext<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Type,
    arg2: Type,
) -> ValueRegs {
    let v4 = constructor_extend(ctx, arg0, &ExtendOp::Signed, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 1531.
    return v4;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: &ExtendOp,
    arg2: Type,
    arg3: Type,
) -> ValueRegs {
    if arg2 == arg3 {
        // Rule at src/isa/riscv64/inst.isle line 1625.
        return arg0;
    }
    match arg1 {
        &ExtendOp::Zero => {
            match arg3 {
                I64 => {
                    if arg2 == I32 {
                        let v38 = C::has_zba(ctx);
                        if v38 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v39 = constructor_rv_zextw(ctx, v9);
                            let v40 = C::value_reg(ctx, v39);
                            // Rule at src/isa/riscv64/inst.isle line 1603.
                            return v40;
                        }
                    }
                }
                I128 => {
                    let v41 = C::fits_in_64(ctx, arg2);
                    if let Some(v42) = v41 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v43 = C::value_reg(ctx, v9);
                        let v53 = constructor_extend(ctx, v43, &ExtendOp::Zero, v42, I64);
                        let v54 = constructor_convert_valueregs_reg(ctx, v53);
                        let v56 = C::load_u64_constant(ctx, 0x0);
                        let v57 = C::value_regs(ctx, v54, v56);
                        // Rule at src/isa/riscv64/inst.isle line 1618.
                        return v57;
                    }
                }
                _ => {}
            }
            match arg2 {
                I8 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v20 = C::imm12_const(ctx, 0xFF);
                        let v21 = constructor_rv_andi(ctx, v9, v20);
                        let v22 = C::value_reg(ctx, v21);
                        // Rule at src/isa/riscv64/inst.isle line 1557.
                        return v22;
                    }
                }
                I16 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v31 = C::has_zbb(ctx);
                        if v31 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v36 = constructor_rv_zexth(ctx, v9);
                            let v37 = C::value_reg(ctx, v36);
                            // Rule at src/isa/riscv64/inst.isle line 1597.
                            return v37;
                        }
                        let v25 = C::has_zbkb(ctx);
                        if v25 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v26 = C::zero_reg(ctx);
                            let v27 = constructor_rv_packw(ctx, v9, v26);
                            let v28 = C::value_reg(ctx, v27);
                            // Rule at src/isa/riscv64/inst.isle line 1572.
                            return v28;
                        }
                    }
                }
                I32 => {
                    if arg3 == I64 {
                        let v25 = C::has_zbkb(ctx);
                        if v25 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v26 = C::zero_reg(ctx);
                            let v29 = constructor_rv_pack(ctx, v9, v26);
                            let v30 = C::value_reg(ctx, v29);
                            // Rule at src/isa/riscv64/inst.isle line 1578.
                            return v30;
                        }
                    }
                }
                _ => {}
            }
        }
        &ExtendOp::Signed => {
            match arg3 {
                I64 => {
                    if arg2 == I32 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v23 = constructor_rv_sextw(ctx, v9);
                        let v24 = C::value_reg(ctx, v23);
                        // Rule at src/isa/riscv64/inst.isle line 1563.
                        return v24;
                    }
                }
                I128 => {
                    let v41 = C::fits_in_64(ctx, arg2);
                    if let Some(v42) = v41 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v43 = C::value_reg(ctx, v9);
                        let v46 = constructor_extend(ctx, v43, &ExtendOp::Signed, v42, I64);
                        let v47 = constructor_convert_valueregs_reg(ctx, v46);
                        let v49 = C::imm12_const(ctx, 0x3F);
                        let v50 = constructor_rv_srai(ctx, v47, v49);
                        let v51 = C::value_regs(ctx, v47, v50);
                        // Rule at src/isa/riscv64/inst.isle line 1610.
                        return v51;
                    }
                }
                _ => {}
            }
            match arg2 {
                I8 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v31 = C::has_zbb(ctx);
                        if v31 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v32 = constructor_rv_sextb(ctx, v9);
                            let v33 = C::value_reg(ctx, v32);
                            // Rule at src/isa/riscv64/inst.isle line 1585.
                            return v33;
                        }
                    }
                }
                I16 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v31 = C::has_zbb(ctx);
                        if v31 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v34 = constructor_rv_sexth(ctx, v9);
                            let v35 = C::value_reg(ctx, v34);
                            // Rule at src/isa/riscv64/inst.isle line 1591.
                            return v35;
                        }
                    }
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v3 = C::fits_in_32(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = C::fits_in_64(ctx, arg3);
        if let Some(v7) = v6 {
            let v9 = C::value_regs_get(ctx, arg0, 0x0);
            let v11 = C::ty_bits(ctx, v4);
            let v12 = C::u8_as_u64(ctx, v11);
            let v13 = C::u64_sub(ctx, 0x40, v12);
            let v14 = C::imm_from_bits(ctx, v13);
            let v15 = constructor_rv_slli(ctx, v9, v14);
            let v16 = &constructor_extend_shift_op(ctx, arg1);
            let v17 = constructor_alu_rr_imm12(ctx, v16, v15, v14);
            let v18 = C::value_reg(ctx, v17);
            // Rule at src/isa/riscv64/inst.isle line 1548.
            return v18;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend", "src/isa/riscv64/inst.isle line 1539"
    )
}

// Generated as internal constructor for term extend_shift_op.
pub fn constructor_extend_shift_op<C: Context>(ctx: &mut C, arg0: &ExtendOp) -> AluOPRRI {
    match arg0 {
        &ExtendOp::Zero => {
            // Rule at src/isa/riscv64/inst.isle line 1543.
            return AluOPRRI::Srli;
        }
        &ExtendOp::Signed => {
            // Rule at src/isa/riscv64/inst.isle line 1544.
            return AluOPRRI::Srai;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend_shift_op", "src/isa/riscv64/inst.isle line 1542"
    )
}

// Generated as internal constructor for term lower_b128_binary.
pub fn constructor_lower_b128_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::value_regs_get(ctx, arg2, 0x0);
    let v6 = constructor_alu_rrr(ctx, arg0, v4, v5);
    let v8 = C::value_regs_get(ctx, arg1, 0x1);
    let v9 = C::value_regs_get(ctx, arg2, 0x1);
    let v10 = constructor_alu_rrr(ctx, arg0, v8, v9);
    let v11 = C::value_regs(ctx, v6, v10);
    // Rule at src/isa/riscv64/inst.isle line 1631.
    return v11;
}

// Generated as internal constructor for term lower_umlhi.
pub fn constructor_lower_umlhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulhu(ctx, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 1640.
        return v3;
    }
    let v5 = C::value_reg(ctx, arg1);
    let v6 = constructor_ext_int_if_need(ctx, false, v5, arg0);
    let v7 = constructor_convert_valueregs_reg(ctx, v6);
    let v8 = C::value_reg(ctx, arg2);
    let v9 = constructor_ext_int_if_need(ctx, false, v8, arg0);
    let v10 = constructor_convert_valueregs_reg(ctx, v9);
    let v11 = constructor_rv_mul(ctx, v7, v10);
    let v12 = C::ty_bits(ctx, arg0);
    let v13 = C::u8_as_i32(ctx, v12);
    let v14 = C::imm12_const(ctx, v13);
    let v15 = constructor_rv_srli(ctx, v11, v14);
    // Rule at src/isa/riscv64/inst.isle line 1645.
    return v15;
}

// Generated as internal constructor for term lower_smlhi.
pub fn constructor_lower_smlhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulh(ctx, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 1651.
        return v3;
    }
    let v4 = constructor_rv_mul(ctx, arg1, arg2);
    let v5 = C::ty_bits(ctx, arg0);
    let v6 = C::u8_as_i32(ctx, v5);
    let v7 = C::imm12_const(ctx, v6);
    let v8 = constructor_rv_srli(ctx, v4, v7);
    // Rule at src/isa/riscv64/inst.isle line 1656.
    return v8;
}

// Generated as internal constructor for term lower_rotl.
pub fn constructor_lower_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I32 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v7 = constructor_rv_rolw(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1674.
                    return v7;
                }
                false => {
                    let v9 = constructor_lower_rotl_shift(ctx, I32, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1680.
                    return v9;
                }
                _ => {}
            }
        }
        I64 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v4 = constructor_rv_rol(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1664.
                    return v4;
                }
                false => {
                    let v6 = constructor_lower_rotl_shift(ctx, I64, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1670.
                    return v6;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v10 = constructor_lower_rotl_shift(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 1684.
    return v10;
}

// Generated as internal constructor for term lower_rotl_shift.
pub fn constructor_lower_rotl_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = C::gen_shamt(ctx, arg0, arg2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v7 = C::value_regs_get(ctx, v3, 0x1);
    let v8 = constructor_rv_sll(ctx, arg1, v5);
    let v9 = constructor_rv_srl(ctx, arg1, v7);
    let v11 = C::zero_reg(ctx);
    let v12 = C::zero_reg(ctx);
    let v13 = C::gen_select_reg(ctx, &IntCC::Equal, v5, v11, v12, v9);
    let v14 = constructor_rv_or(ctx, v8, v13);
    // Rule at src/isa/riscv64/inst.isle line 1693.
    return v14;
}

// Generated as internal constructor for term lower_rotr.
pub fn constructor_lower_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I32 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v7 = constructor_rv_rorw(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1723.
                    return v7;
                }
                false => {
                    let v9 = constructor_lower_rotr_shift(ctx, I32, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1729.
                    return v9;
                }
                _ => {}
            }
        }
        I64 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v4 = constructor_rv_ror(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1714.
                    return v4;
                }
                false => {
                    let v6 = constructor_lower_rotr_shift(ctx, I64, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1719.
                    return v6;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v10 = constructor_lower_rotr_shift(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 1733.
    return v10;
}

// Generated as internal constructor for term lower_rotr_shift.
pub fn constructor_lower_rotr_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = C::gen_shamt(ctx, arg0, arg2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v7 = C::value_regs_get(ctx, v3, 0x1);
    let v8 = constructor_rv_srl(ctx, arg1, v5);
    let v9 = constructor_rv_sll(ctx, arg1, v7);
    let v11 = C::zero_reg(ctx);
    let v12 = C::zero_reg(ctx);
    let v13 = C::gen_select_reg(ctx, &IntCC::Equal, v5, v11, v12, v9);
    let v14 = constructor_rv_or(ctx, v8, v13);
    // Rule at src/isa/riscv64/inst.isle line 1741.
    return v14;
}

// Generated as internal constructor for term gen_bseti.
pub fn constructor_gen_bseti<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    let v2 = C::has_zbs(ctx);
    match v2 {
        true => {
            let v12 = C::u64_as_i32(ctx, arg1);
            let v13 = C::imm12_const(ctx, v12);
            let v14 = constructor_rv_bseti(ctx, arg0, v13);
            // Rule at src/isa/riscv64/inst.isle line 1769.
            return v14;
        }
        false => {
            let v4 = C::u64_le(ctx, arg1, 0xC);
            match v4 {
                true => {
                    let v6 = C::u64_shl(ctx, 0x1, arg1);
                    let v9 = C::u64_as_i32(ctx, v6);
                    let v10 = C::imm12_const(ctx, v9);
                    let v11 = constructor_rv_ori(ctx, arg0, v10);
                    // Rule at src/isa/riscv64/inst.isle line 1764.
                    return v11;
                }
                false => {
                    let v6 = C::u64_shl(ctx, 0x1, arg1);
                    let v7 = C::load_u64_constant(ctx, v6);
                    let v8 = constructor_rv_or(ctx, arg0, v7);
                    // Rule at src/isa/riscv64/inst.isle line 1758.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bseti", "src/isa/riscv64/inst.isle line 1757"
    )
}

// Generated as internal constructor for term gen_popcnt.
pub fn constructor_gen_popcnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Popcnt {
        sum: v5,
        step: v4,
        tmp: v3,
        rs: arg0,
        ty: arg1,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1776.
    return v8;
}

// Generated as internal constructor for term lower_popcnt.
pub fn constructor_lower_popcnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::has_zbb(ctx);
    match v2 {
        true => {
            let v4 = C::value_reg(ctx, arg0);
            let v5 = constructor_ext_int_if_need(ctx, false, v4, arg1);
            let v6 = constructor_convert_valueregs_reg(ctx, v5);
            let v7 = constructor_rv_cpop(ctx, v6);
            // Rule at src/isa/riscv64/inst.isle line 1785.
            return v7;
        }
        false => {
            let v8 = constructor_gen_popcnt(ctx, arg0, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1788.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_popcnt", "src/isa/riscv64/inst.isle line 1784"
    )
}

// Generated as internal constructor for term lower_popcnt_i128.
pub fn constructor_lower_popcnt_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = constructor_lower_popcnt(ctx, v2, I64);
    let v6 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lower_popcnt(ctx, v6, I64);
    let v8 = constructor_rv_add(ctx, v4, v7);
    let v10 = C::load_u64_constant(ctx, 0x0);
    let v11 = C::value_regs(ctx, v8, v10);
    // Rule at src/isa/riscv64/inst.isle line 1794.
    return v11;
}

// Generated as internal constructor for term lower_i128_rotl.
pub fn constructor_lower_i128_rotl<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::gen_shamt(ctx, I128, v4);
    let v6 = C::value_regs_get(ctx, v5, 0x0);
    let v8 = C::value_regs_get(ctx, v5, 0x1);
    let v9 = C::value_regs_get(ctx, arg0, 0x0);
    let v10 = constructor_rv_sll(ctx, v9, v6);
    let v11 = C::value_regs_get(ctx, arg0, 0x1);
    let v12 = constructor_rv_srl(ctx, v11, v8);
    let v14 = C::zero_reg(ctx);
    let v15 = C::zero_reg(ctx);
    let v16 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v14, v15, v12);
    let v17 = constructor_rv_or(ctx, v10, v16);
    let v18 = C::value_regs_get(ctx, arg0, 0x1);
    let v19 = constructor_rv_sll(ctx, v18, v6);
    let v20 = C::value_regs_get(ctx, arg0, 0x0);
    let v21 = constructor_rv_srl(ctx, v20, v8);
    let v22 = C::zero_reg(ctx);
    let v23 = C::zero_reg(ctx);
    let v24 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v22, v23, v21);
    let v25 = constructor_rv_or(ctx, v19, v24);
    let v27 = C::load_u64_constant(ctx, 0x40);
    let v28 = C::value_regs_get(ctx, arg1, 0x0);
    let v30 = C::imm12_const(ctx, 0x7F);
    let v31 = constructor_rv_andi(ctx, v28, v30);
    let v33 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v31, v27, v25, v17);
    let v34 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v31, v27, v17, v25);
    let v35 = C::value_regs(ctx, v33, v34);
    // Rule at src/isa/riscv64/inst.isle line 1806.
    return v35;
}

// Generated as internal constructor for term lower_i128_rotr.
pub fn constructor_lower_i128_rotr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::gen_shamt(ctx, I128, v4);
    let v6 = C::value_regs_get(ctx, v5, 0x0);
    let v8 = C::value_regs_get(ctx, v5, 0x1);
    let v9 = C::value_regs_get(ctx, arg0, 0x0);
    let v10 = constructor_rv_srl(ctx, v9, v6);
    let v11 = C::value_regs_get(ctx, arg0, 0x1);
    let v12 = constructor_rv_sll(ctx, v11, v8);
    let v14 = C::zero_reg(ctx);
    let v15 = C::zero_reg(ctx);
    let v16 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v14, v15, v12);
    let v17 = constructor_rv_or(ctx, v10, v16);
    let v18 = C::value_regs_get(ctx, arg0, 0x1);
    let v19 = constructor_rv_srl(ctx, v18, v6);
    let v20 = C::value_regs_get(ctx, arg0, 0x0);
    let v21 = constructor_rv_sll(ctx, v20, v8);
    let v22 = C::zero_reg(ctx);
    let v23 = C::zero_reg(ctx);
    let v24 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v22, v23, v21);
    let v25 = constructor_rv_or(ctx, v19, v24);
    let v27 = C::load_u64_constant(ctx, 0x40);
    let v28 = C::value_regs_get(ctx, arg1, 0x0);
    let v30 = C::imm12_const(ctx, 0x7F);
    let v31 = constructor_rv_andi(ctx, v28, v30);
    let v33 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v31, v27, v25, v17);
    let v34 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v31, v27, v17, v25);
    let v35 = C::value_regs(ctx, v33, v34);
    // Rule at src/isa/riscv64/inst.isle line 1835.
    return v35;
}

// Generated as internal constructor for term lower_i128_ishl.
pub fn constructor_lower_i128_ishl<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::gen_shamt(ctx, I128, v4);
    let v6 = C::value_regs_get(ctx, v5, 0x0);
    let v8 = C::value_regs_get(ctx, v5, 0x1);
    let v9 = C::value_regs_get(ctx, arg0, 0x0);
    let v10 = constructor_rv_sll(ctx, v9, v6);
    let v11 = C::value_regs_get(ctx, arg0, 0x0);
    let v12 = constructor_rv_srl(ctx, v11, v8);
    let v14 = C::zero_reg(ctx);
    let v15 = C::zero_reg(ctx);
    let v16 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v14, v15, v12);
    let v17 = C::value_regs_get(ctx, arg0, 0x1);
    let v18 = constructor_rv_sll(ctx, v17, v6);
    let v19 = constructor_rv_or(ctx, v16, v18);
    let v21 = C::load_u64_constant(ctx, 0x40);
    let v22 = C::value_regs_get(ctx, arg1, 0x0);
    let v24 = C::imm12_const(ctx, 0x7F);
    let v25 = constructor_rv_andi(ctx, v22, v24);
    let v27 = C::zero_reg(ctx);
    let v28 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v25, v21, v27, v10);
    let v29 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v25, v21, v10, v19);
    let v30 = C::value_regs(ctx, v28, v29);
    // Rule at src/isa/riscv64/inst.isle line 1865.
    return v30;
}

// Generated as internal constructor for term lower_i128_ushr.
pub fn constructor_lower_i128_ushr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::gen_shamt(ctx, I128, v4);
    let v6 = C::value_regs_get(ctx, v5, 0x0);
    let v8 = C::value_regs_get(ctx, v5, 0x1);
    let v9 = C::value_regs_get(ctx, arg0, 0x1);
    let v10 = constructor_rv_sll(ctx, v9, v8);
    let v12 = C::zero_reg(ctx);
    let v13 = C::zero_reg(ctx);
    let v14 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v12, v13, v10);
    let v15 = C::value_regs_get(ctx, arg0, 0x0);
    let v16 = constructor_rv_srl(ctx, v15, v6);
    let v17 = constructor_rv_or(ctx, v14, v16);
    let v19 = C::load_u64_constant(ctx, 0x40);
    let v20 = C::value_regs_get(ctx, arg0, 0x1);
    let v21 = constructor_rv_srl(ctx, v20, v6);
    let v22 = C::value_regs_get(ctx, arg1, 0x0);
    let v24 = C::imm12_const(ctx, 0x7F);
    let v25 = constructor_rv_andi(ctx, v22, v24);
    let v27 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v25, v19, v21, v17);
    let v28 = C::zero_reg(ctx);
    let v29 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v25, v19, v28, v21);
    let v30 = C::value_regs(ctx, v27, v29);
    // Rule at src/isa/riscv64/inst.isle line 1887.
    return v30;
}

// Generated as internal constructor for term lower_i128_sshr.
pub fn constructor_lower_i128_sshr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::gen_shamt(ctx, I128, v4);
    let v6 = C::value_regs_get(ctx, v5, 0x0);
    let v8 = C::value_regs_get(ctx, v5, 0x1);
    let v9 = C::value_regs_get(ctx, arg0, 0x1);
    let v10 = constructor_rv_sll(ctx, v9, v8);
    let v12 = C::zero_reg(ctx);
    let v13 = C::zero_reg(ctx);
    let v14 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v12, v13, v10);
    let v15 = C::value_regs_get(ctx, arg0, 0x0);
    let v16 = constructor_rv_srl(ctx, v15, v6);
    let v17 = constructor_rv_or(ctx, v14, v16);
    let v19 = C::load_u64_constant(ctx, 0x40);
    let v20 = C::value_regs_get(ctx, arg0, 0x1);
    let v21 = constructor_rv_sra(ctx, v20, v6);
    let v23 = constructor_load_imm12(ctx, -0x1);
    let v25 = C::value_regs_get(ctx, arg0, 0x1);
    let v26 = C::zero_reg(ctx);
    let v27 = C::zero_reg(ctx);
    let v28 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v25, v26, v23, v27);
    let v29 = C::load_u64_constant(ctx, 0x40);
    let v30 = C::value_regs_get(ctx, arg1, 0x0);
    let v32 = C::imm12_const(ctx, 0x7F);
    let v33 = constructor_rv_andi(ctx, v30, v32);
    let v35 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v33, v29, v21, v17);
    let v36 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v33, v29, v28, v21);
    let v37 = C::value_regs(ctx, v35, v36);
    // Rule at src/isa/riscv64/inst.isle line 1912.
    return v37;
}

// Generated as internal constructor for term gen_load.
pub fn constructor_gen_load<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: &LoadOP,
    arg3: MemFlags,
    arg4: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg4);
    let v7 = C::gen_amode(ctx, arg0, arg1, I64);
    let v8 = MInst::Load {
        rd: v5,
        op: arg2.clone(),
        flags: arg3,
        from: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1948.
    return v10;
}

// Generated as internal constructor for term gen_load_128.
pub fn constructor_gen_load_128<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: MemFlags,
) -> ValueRegs {
    let v5 = constructor_gen_load(ctx, arg0, arg1, &LoadOP::Ld, arg2, I64);
    let v7 = C::offset32_add(ctx, arg1, 0x8);
    let v8 = constructor_gen_load(ctx, arg0, v7, &LoadOP::Ld, arg2, I64);
    let v9 = C::value_regs(ctx, v5, v8);
    // Rule at src/isa/riscv64/inst.isle line 1956.
    return v9;
}

// Generated as internal constructor for term gen_store.
pub fn constructor_gen_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: &StoreOP,
    arg3: MemFlags,
    arg4: Reg,
) -> InstOutput {
    let v6 = C::gen_amode(ctx, arg0, arg1, I64);
    let v7 = MInst::Store {
        to: v6,
        op: arg2.clone(),
        flags: arg3,
        src: arg4,
    };
    let v8 = SideEffectNoResult::Inst { inst: v7 };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src/isa/riscv64/inst.isle line 1971.
    return v9;
}

// Generated as internal constructor for term gen_store_128.
pub fn constructor_gen_store_128<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: MemFlags,
    arg3: ValueRegs,
) -> InstOutput {
    let v5 = C::gen_amode(ctx, arg0, arg1, I64);
    let v8 = C::value_regs_get(ctx, arg3, 0x0);
    let v11 = C::offset32_add(ctx, arg1, 0x8);
    let v12 = C::gen_amode(ctx, arg0, v11, I64);
    let v14 = C::value_regs_get(ctx, arg3, 0x1);
    let v9 = MInst::Store {
        to: v5,
        op: StoreOP::Sd,
        flags: arg2,
        src: v8,
    };
    let v15 = MInst::Store {
        to: v12,
        op: StoreOP::Sd,
        flags: arg2,
        src: v14,
    };
    let v16 = SideEffectNoResult::Inst2 {
        inst1: v9,
        inst2: v15,
    };
    let v17 = constructor_side_effect(ctx, &v16);
    // Rule at src/isa/riscv64/inst.isle line 1977.
    return v17;
}

// Generated as internal constructor for term gen_atomic.
pub fn constructor_gen_atomic<C: Context>(
    ctx: &mut C,
    arg0: &AtomicOP,
    arg1: Reg,
    arg2: Reg,
    arg3: AMO,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Atomic {
        op: arg0.clone(),
        rd: v5,
        addr: arg1,
        src: arg2,
        amo: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1990.
    return v8;
}

// Generated as internal constructor for term get_atomic_rmw_op.
pub fn constructor_get_atomic_rmw_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AtomicRmwOp,
) -> AtomicOP {
    match arg0 {
        I32 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 1999.
                    return AtomicOP::AmoaddW;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2006.
                    return AtomicOP::AmoandW;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2014.
                    return AtomicOP::AmoorW;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2022.
                    return AtomicOP::AmomaxW;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2030.
                    return AtomicOP::AmominW;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2038.
                    return AtomicOP::AmomaxuW;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2047.
                    return AtomicOP::AmominuW;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2055.
                    return AtomicOP::AmoswapW;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2063.
                    return AtomicOP::AmoxorW;
                }
                _ => {}
            }
        }
        I64 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2002.
                    return AtomicOP::AmoaddD;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2010.
                    return AtomicOP::AmoandD;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2018.
                    return AtomicOP::AmoorD;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2026.
                    return AtomicOP::AmomaxD;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2034.
                    return AtomicOP::AmominD;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2043.
                    return AtomicOP::AmomaxuD;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2051.
                    return AtomicOP::AmominuD;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2059.
                    return AtomicOP::AmoswapD;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2067.
                    return AtomicOP::AmoxorD;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_atomic_rmw_op", "src/isa/riscv64/inst.isle line 1997"
    )
}

// Generated as internal constructor for term gen_atomic_load.
pub fn constructor_gen_atomic_load<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::AtomicLoad {
        rd: v3,
        ty: arg1,
        p: arg0,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 2076.
    return v6;
}

// Generated as internal constructor for term gen_atomic_store.
pub fn constructor_gen_atomic_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
    arg2: Reg,
) -> InstOutput {
    let v3 = MInst::AtomicStore {
        src: arg2,
        ty: arg1,
        p: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src/isa/riscv64/inst.isle line 2085.
    return v5;
}

// Generated as internal constructor for term gen_select.
pub fn constructor_gen_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ValueRegs,
    arg3: ValueRegs,
) -> ValueRegs {
    let v4 = &C::alloc_vec_writable(ctx, arg0);
    let v5 = &C::vec_writable_clone(ctx, v4);
    let v6 = MInst::Select {
        dst: v4.clone(),
        ty: arg0,
        condition: arg1,
        x: arg2,
        y: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::vec_writable_to_regs(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2113.
    return v8;
}

// Generated as internal constructor for term gen_bitselect.
pub fn constructor_gen_bitselect<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = constructor_rv_and(ctx, arg1, arg2);
    let v5 = constructor_rv_not(ctx, arg1);
    let v6 = constructor_rv_and(ctx, v5, arg3);
    let v7 = constructor_rv_or(ctx, v4, v6);
    // Rule at src/isa/riscv64/inst.isle line 2142.
    return v7;
}

// Generated as internal constructor for term gen_int_select.
pub fn constructor_gen_int_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntSelectOP,
    arg2: ValueRegs,
    arg3: ValueRegs,
) -> ValueRegs {
    let v4 = &C::alloc_vec_writable(ctx, arg0);
    let v5 = &C::vec_writable_clone(ctx, v4);
    let v6 = MInst::IntSelect {
        op: arg1.clone(),
        dst: v5.clone(),
        x: arg2,
        y: arg3,
        ty: arg0,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::vec_writable_to_regs(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2155.
    return v8;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> InstOutput {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    let v3 = constructor_side_effect(ctx, &v2);
    // Rule at src/isa/riscv64/inst.isle line 2165.
    return v3;
}

// Generated as internal constructor for term int_load_op.
pub fn constructor_int_load_op<C: Context>(ctx: &mut C, arg0: bool, arg1: u8) -> LoadOP {
    match arg1 {
        0x8 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 2181.
                    return LoadOP::Lb;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 2177.
                    return LoadOP::Lbu;
                }
                _ => {}
            }
        }
        0x10 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 2188.
                    return LoadOP::Lh;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 2185.
                    return LoadOP::Lhu;
                }
                _ => {}
            }
        }
        0x20 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 2194.
                    return LoadOP::Lw;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 2191.
                    return LoadOP::Lwu;
                }
                _ => {}
            }
        }
        0x40 => {
            // Rule at src/isa/riscv64/inst.isle line 2198.
            return LoadOP::Ld;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "int_load_op", "src/isa/riscv64/inst.isle line 2175"
    )
}

// Generated as internal constructor for term gen_fcvt_int.
pub fn constructor_gen_fcvt_int<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg4);
    let v7 = C::temp_writable_reg(ctx, F64);
    let v8 = MInst::FcvtToInt {
        is_sat: arg0,
        rd: v5,
        tmp: v7,
        rs: arg1,
        is_signed: arg2,
        in_type: arg3,
        out_type: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2211.
    return v10;
}

// Generated as internal constructor for term lower_float_binary.
pub fn constructor_lower_float_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v4 = C::move_f_to_x(ctx, arg1, arg3);
    let v5 = C::move_f_to_x(ctx, arg2, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, v4, v5);
    let v7 = C::move_x_to_f(ctx, v6, arg3);
    // Rule at src/isa/riscv64/inst.isle line 2224.
    return v7;
}

// Generated as internal constructor for term lower_float_bnot.
pub fn constructor_lower_float_bnot<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::move_f_to_x(ctx, arg0, arg1);
    let v3 = constructor_rv_not(ctx, v2);
    let v4 = C::move_x_to_f(ctx, v3, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2236.
    return v4;
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
    arg3: Type,
) -> Reg {
    let v4 = &C::signed_cond_code(ctx, arg0);
    if let Some(v5) = v4 {
        let v7 = constructor_ext_int_if_need(ctx, true, arg1, arg3);
        let v8 = constructor_ext_int_if_need(ctx, true, arg2, arg3);
        let v9 = constructor_gen_icmp(ctx, arg0, v7, v8, arg3);
        // Rule at src/isa/riscv64/inst.isle line 2248.
        return v9;
    }
    let v11 = constructor_ext_int_if_need(ctx, false, arg1, arg3);
    let v12 = constructor_ext_int_if_need(ctx, false, arg2, arg3);
    let v13 = constructor_gen_icmp(ctx, arg0, v11, v12, arg3);
    // Rule at src/isa/riscv64/inst.isle line 2251.
    return v13;
}

// Generated as internal constructor for term i128_sub.
pub fn constructor_i128_sub<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = constructor_rv_sub(ctx, v3, v4);
    let v6 = C::value_regs_get(ctx, arg0, 0x0);
    let v7 = constructor_rv_sltu(ctx, v6, v5);
    let v9 = C::value_regs_get(ctx, arg0, 0x1);
    let v10 = C::value_regs_get(ctx, arg1, 0x1);
    let v11 = constructor_rv_sub(ctx, v9, v10);
    let v12 = constructor_rv_sub(ctx, v11, v7);
    let v13 = C::value_regs(ctx, v5, v12);
    // Rule at src/isa/riscv64/inst.isle line 2257.
    return v13;
}

// Generated as internal constructor for term lower_uadd_overflow.
pub fn constructor_lower_uadd_overflow<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
) -> ValueRegs {
    if arg2 == I64 {
        let v3 = constructor_rv_add(ctx, arg0, arg1);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::value_reg(ctx, arg0);
        let v8 = constructor_gen_icmp(ctx, &IntCC::UnsignedLessThan, v5, v6, I64);
        let v9 = C::value_regs(ctx, v3, v8);
        // Rule at src/isa/riscv64/inst.isle line 2273.
        return v9;
    }
    let v10 = C::fits_in_32(ctx, arg2);
    if let Some(v11) = v10 {
        let v13 = C::value_reg(ctx, arg0);
        let v14 = constructor_ext_int_if_need(ctx, false, v13, v11);
        let v15 = constructor_convert_valueregs_reg(ctx, v14);
        let v16 = C::value_reg(ctx, arg1);
        let v17 = constructor_ext_int_if_need(ctx, false, v16, v11);
        let v18 = constructor_convert_valueregs_reg(ctx, v17);
        let v19 = constructor_rv_add(ctx, v15, v18);
        let v20 = C::ty_bits(ctx, v11);
        let v21 = C::u8_as_i32(ctx, v20);
        let v22 = C::imm12_const(ctx, v21);
        let v23 = constructor_rv_srli(ctx, v19, v22);
        let v24 = C::value_regs(ctx, v19, v23);
        // Rule at src/isa/riscv64/inst.isle line 2280.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_uadd_overflow", "src/isa/riscv64/inst.isle line 2271"
    )
}

// Generated as internal constructor for term gen_jump.
pub fn constructor_gen_jump<C: Context>(ctx: &mut C, arg0: MachLabel) -> MInst {
    let v1 = C::label_to_br_target(ctx, arg0);
    let v2 = MInst::Jal { dest: v1 };
    // Rule at src/isa/riscv64/inst.isle line 2295.
    return v2;
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &VecMachLabel,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v69,
            arg: v70,
            table: v71,
        } => {
            if let &Opcode::BrTable = v69 {
                let v72 = C::put_in_reg(ctx, v70);
                let v73 = C::lower_br_table(ctx, v72, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2385.
                return Some(v73);
            }
        }
        &InstructionData::Brif {
            opcode: ref v10,
            arg: v11,
            blocks: ref v12,
        } => {
            if let &Opcode::Brif = v10 {
                let v13 = C::value_type(ctx, v11);
                if v13 == I128 {
                    let v22 = C::zero_reg(ctx);
                    let v23 = C::zero_reg(ctx);
                    let v24 = C::value_regs(ctx, v22, v23);
                    let v25 = C::put_in_regs(ctx, v11);
                    let v27 = constructor_gen_icmp(ctx, &IntCC::NotEqual, v25, v24, I128);
                    let v28 = C::value_reg(ctx, v27);
                    let v30 = C::lower_cond_br(ctx, &IntCC::NotEqual, v28, arg1, I64);
                    // Rule at src/isa/riscv64/inst.isle line 2354.
                    return Some(v30);
                }
                let v31 = C::maybe_uextend(ctx, v11);
                if let Some(v32) = v31 {
                    let v33 = C::def_inst(ctx, v32);
                    if let Some(v34) = v33 {
                        let v35 = &C::inst_data(ctx, v34);
                        match v35 {
                            &InstructionData::FloatCompare {
                                opcode: ref v46,
                                args: ref v47,
                                cond: ref v48,
                            } => {
                                if let &Opcode::Fcmp = v46 {
                                    let v53 = C::floatcc_unordered(ctx, v48);
                                    match v53 {
                                        true => {
                                            let v6 = C::vec_label_get(ctx, arg1, 0x0);
                                            let v54 = C::label_to_br_target(ctx, v6);
                                            let v56 = C::vec_label_get(ctx, arg1, 0x1);
                                            let v57 = C::label_to_br_target(ctx, v56);
                                            let v58 = &C::floatcc_inverse(ctx, v48);
                                            let v49 = C::unpack_value_array_2(ctx, v47);
                                            let v59 = C::put_in_reg(ctx, v49.0);
                                            let v60 = C::put_in_reg(ctx, v49.1);
                                            let v52 = C::value_type(ctx, v49.0);
                                            let v61 =
                                                &constructor_emit_fcmp(ctx, v58, v52, v59, v60);
                                            let v62 = &constructor_cond_br(ctx, v61, v57, v54);
                                            let v63 = constructor_emit_side_effect(ctx, v62);
                                            // Rule at src/isa/riscv64/inst.isle line 2366.
                                            return Some(v63);
                                        }
                                        false => {
                                            let v6 = C::vec_label_get(ctx, arg1, 0x0);
                                            let v54 = C::label_to_br_target(ctx, v6);
                                            let v56 = C::vec_label_get(ctx, arg1, 0x1);
                                            let v57 = C::label_to_br_target(ctx, v56);
                                            let v49 = C::unpack_value_array_2(ctx, v47);
                                            let v64 = C::put_in_reg(ctx, v49.0);
                                            let v65 = C::put_in_reg(ctx, v49.1);
                                            let v52 = C::value_type(ctx, v49.0);
                                            let v66 =
                                                &constructor_emit_fcmp(ctx, v48, v52, v64, v65);
                                            let v67 = &constructor_cond_br(ctx, v66, v54, v57);
                                            let v68 = constructor_emit_side_effect(ctx, v67);
                                            // Rule at src/isa/riscv64/inst.isle line 2373.
                                            return Some(v68);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            &InstructionData::IntCompare {
                                opcode: ref v36,
                                args: ref v37,
                                cond: ref v38,
                            } => {
                                if let &Opcode::Icmp = v36 {
                                    let v39 = C::unpack_value_array_2(ctx, v37);
                                    let v43 = C::put_in_regs(ctx, v39.0);
                                    let v44 = C::put_in_regs(ctx, v39.1);
                                    let v42 = C::value_type(ctx, v39.0);
                                    let v45 = C::lower_br_icmp(ctx, v38, v43, v44, arg1, v42);
                                    // Rule at src/isa/riscv64/inst.isle line 2361.
                                    return Some(v45);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let v18 = C::put_in_regs(ctx, v11);
                let v20 = constructor_normalize_cmp_value(ctx, v13, v18, &ExtendOp::Zero);
                let v21 = C::lower_cond_br(ctx, &IntCC::NotEqual, v20, arg1, v13);
                // Rule at src/isa/riscv64/inst.isle line 2350.
                return Some(v21);
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v6 = C::vec_label_get(ctx, arg1, 0x0);
                let v7 = &constructor_gen_jump(ctx, v6);
                let v8 = SideEffectNoResult::Inst { inst: v7.clone() };
                let v9 = constructor_emit_side_effect(ctx, &v8);
                // Rule at src/isa/riscv64/inst.isle line 2302.
                return Some(v9);
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term normalize_cmp_value.
pub fn constructor_normalize_cmp_value<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: &ExtendOp,
) -> ValueRegs {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_extend(ctx, arg1, arg2, v2, I64);
        // Rule at src/isa/riscv64/inst.isle line 2325.
        return v6;
    }
    match arg0 {
        I64 => {
            // Rule at src/isa/riscv64/inst.isle line 2328.
            return arg1;
        }
        I128 => {
            // Rule at src/isa/riscv64/inst.isle line 2329.
            return arg1;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "normalize_cmp_value", "src/isa/riscv64/inst.isle line 2323"
    )
}

// Generated as internal constructor for term normalize_fcvt_from_int.
pub fn constructor_normalize_fcvt_from_int<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Type,
    arg2: &ExtendOp,
) -> ValueRegs {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = constructor_extend(ctx, arg0, arg2, v3, I64);
        // Rule at src/isa/riscv64/inst.isle line 2332.
        return v6;
    }
    // Rule at src/isa/riscv64/inst.isle line 2334.
    return arg0;
}

// Generated as internal constructor for term truthy_to_reg.
pub fn constructor_truthy_to_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> Reg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        // Rule at src/isa/riscv64/inst.isle line 2341.
        return v5;
    }
    if arg0 == I128 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v7 = C::value_regs_get(ctx, arg1, 0x1);
        let v8 = constructor_rv_or(ctx, v5, v7);
        // Rule at src/isa/riscv64/inst.isle line 2343.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "truthy_to_reg", "src/isa/riscv64/inst.isle line 2340"
    )
}

// Generated as internal constructor for term gen_rev8.
pub fn constructor_gen_rev8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v1 = C::has_zbb(ctx);
    match v1 {
        true => {
            let v2 = constructor_rv_rev8(ctx, arg0);
            // Rule at src/isa/riscv64/inst.isle line 2392.
            return v2;
        }
        false => {
            let v4 = C::temp_writable_reg(ctx, I64);
            let v5 = C::temp_writable_reg(ctx, I64);
            let v6 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Rev8 {
                rs: arg0,
                step: v6,
                tmp: v5,
                rd: v4,
            };
            let v8 = C::emit(ctx, &v7);
            let v9 = C::writable_reg_to_reg(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2398.
            return v9;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_rev8", "src/isa/riscv64/inst.isle line 2391"
    )
}

// Generated as internal constructor for term gen_brev8.
pub fn constructor_gen_brev8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::has_zbkb(ctx);
    match v2 {
        true => {
            let v3 = constructor_rv_brev8(ctx, arg0);
            // Rule at src/isa/riscv64/inst.isle line 2409.
            return v3;
        }
        false => {
            let v5 = C::temp_writable_reg(ctx, I64);
            let v6 = C::temp_writable_reg(ctx, I64);
            let v7 = C::temp_writable_reg(ctx, I64);
            let v8 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Brev8 {
                rs: arg0,
                ty: arg1,
                step: v7,
                tmp: v5,
                tmp2: v6,
                rd: v8,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 2414.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_brev8", "src/isa/riscv64/inst.isle line 2408"
    )
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    if arg0 == I128 {
        let v10 = constructor_value_regs_zero(ctx);
        let v11 = constructor_i128_sub(ctx, v10, arg1);
        // Rule at src/isa/riscv64/inst.isle line 2431.
        return v11;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::value_regs_get(ctx, arg1, 0x0);
            let v8 = constructor_rv_neg(ctx, v7);
            let v9 = C::value_reg(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 2427.
            return v9;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg", "src/isa/riscv64/inst.isle line 2426"
    )
}

// Generated as internal constructor for term max.
pub fn constructor_max<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::has_zbb(ctx);
            match v7 {
                true => {
                    let v8 = constructor_rv_max(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2437.
                    return v8;
                }
                false => {
                    let v10 =
                        C::gen_select_reg(ctx, &IntCC::SignedGreaterThan, arg1, arg2, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2441.
                    return v10;
                }
                _ => {}
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "max", "src/isa/riscv64/inst.isle line 2436"
    )
}

// Generated as internal constructor for term lower_iabs.
pub fn constructor_lower_iabs<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::value_reg(ctx, arg1);
        let v6 = constructor_ext_int_if_need(ctx, true, v5, v2);
        let v7 = constructor_convert_valueregs_reg(ctx, v6);
        let v9 = C::value_reg(ctx, v7);
        let v10 = constructor_neg(ctx, I64, v9);
        let v11 = constructor_convert_valueregs_reg(ctx, v10);
        let v12 = constructor_max(ctx, I64, v7, v11);
        // Rule at src/isa/riscv64/inst.isle line 2453.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_iabs", "src/isa/riscv64/inst.isle line 2446"
    )
}

// Generated as internal constructor for term gen_trapif.
pub fn constructor_gen_trapif<C: Context>(ctx: &mut C, arg0: Reg, arg1: &TrapCode) -> InstOutput {
    let v2 = MInst::TrapIf {
        test: arg0,
        trap_code: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    let v4 = constructor_side_effect(ctx, &v3);
    // Rule at src/isa/riscv64/inst.isle line 2460.
    return v4;
}

// Generated as internal constructor for term gen_trapifc.
pub fn constructor_gen_trapifc<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: Reg,
    arg3: &TrapCode,
) -> InstOutput {
    let v4 = MInst::TrapIfC {
        rs1: arg1,
        rs2: arg2,
        cc: arg0.clone(),
        trap_code: arg3.clone(),
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    let v6 = constructor_side_effect(ctx, &v5);
    // Rule at src/isa/riscv64/inst.isle line 2465.
    return v6;
}

// Generated as internal constructor for term gen_div_overflow.
pub fn constructor_gen_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
) -> InstOutput {
    let v4 = constructor_load_imm12(ctx, -0x1);
    let v6 = constructor_load_imm12(ctx, 0x1);
    let v8 = C::imm12_const(ctx, 0x3F);
    let v9 = constructor_rv_slli(ctx, v6, v8);
    let v10 = C::shift_int_to_most_significant(ctx, arg0, arg2);
    let v12 = C::value_reg(ctx, v4);
    let v13 = C::value_reg(ctx, arg1);
    let v14 = constructor_gen_icmp(ctx, &IntCC::Equal, v12, v13, arg2);
    let v15 = C::value_reg(ctx, v9);
    let v16 = C::value_reg(ctx, v10);
    let v17 = constructor_gen_icmp(ctx, &IntCC::Equal, v15, v16, arg2);
    let v18 = constructor_rv_and(ctx, v14, v17);
    let v20 = constructor_gen_trapif(ctx, v18, &TrapCode::IntegerOverflow);
    // Rule at src/isa/riscv64/inst.isle line 2474.
    return v20;
}

// Generated as internal constructor for term gen_div_by_zero.
pub fn constructor_gen_div_by_zero<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v2 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapifc(
        ctx,
        &IntCC::Equal,
        v2,
        arg0,
        &TrapCode::IntegerDivisionByZero,
    );
    // Rule at src/isa/riscv64/inst.isle line 2486.
    return v4;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_rv_mul(ctx, arg0, arg1);
    let v4 = constructor_rv_add(ctx, v3, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2500.
    return v4;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        if arg1 == I128 {
            let v29 = constructor_lower_bmask(ctx, I64, I128, arg2);
            let v30 = C::value_regs_get(ctx, v29, 0x0);
            let v31 = C::value_regs_get(ctx, v29, 0x0);
            let v32 = C::value_regs(ctx, v30, v31);
            // Rule at src/isa/riscv64/inst.isle line 2542.
            return v32;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v24 = constructor_lower_bmask(ctx, I64, v5, arg2);
            let v25 = C::value_regs_get(ctx, v24, 0x0);
            let v26 = C::value_regs_get(ctx, v24, 0x0);
            let v27 = C::value_regs(ctx, v25, v26);
            // Rule at src/isa/riscv64/inst.isle line 2533.
            return v27;
        }
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0);
            let v19 = C::value_regs_get(ctx, arg2, 0x1);
            let v20 = constructor_rv_or(ctx, v17, v19);
            let v22 = C::value_reg(ctx, v20);
            let v23 = constructor_lower_bmask(ctx, v2, I64, v22);
            // Rule at src/isa/riscv64/inst.isle line 2523.
            return v23;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v8 = constructor_normalize_cmp_value(ctx, v5, arg2, &ExtendOp::Zero);
            let v9 = constructor_convert_valueregs_reg(ctx, v8);
            let v10 = C::zero_reg(ctx);
            let v12 = constructor_load_imm12(ctx, -0x1);
            let v14 = C::gen_select_reg(ctx, &IntCC::Equal, v10, v9, v10, v12);
            let v15 = C::value_reg(ctx, v14);
            // Rule at src/isa/riscv64/inst.isle line 2513.
            return v15;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/riscv64/inst.isle line 2507"
    )
}

// Generated as internal constructor for term gen_mov_from_preg.
pub fn constructor_gen_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/riscv64/inst.isle line 2553.
    return v5;
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v2 = C::imm(ctx, I64, 0x0);
    let v3 = C::imm(ctx, I64, 0x0);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/riscv64/inst.isle line 2569.
    return v4;
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = C::imm_from_bits(ctx, 0x1);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 2579.
    return v3;
}

// Generated as internal constructor for term is_not_nan.
pub fn constructor_is_not_nan<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2582.
    return v2;
}

// Generated as internal constructor for term ordered.
pub fn constructor_ordered<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_is_not_nan(ctx, arg0, arg1);
    let v4 = constructor_is_not_nan(ctx, arg0, arg2);
    let v5 = constructor_rv_and(ctx, v3, v4);
    // Rule at src/isa/riscv64/inst.isle line 2585.
    return v5;
}

// Generated as internal constructor for term cmp_result.
pub fn constructor_cmp_result<C: Context>(ctx: &mut C, arg0: Reg) -> CmpResult {
    let v2 = CmpResult::Result {
        result: arg0,
        invert: false,
    };
    // Rule at src/isa/riscv64/inst.isle line 2595.
    return v2;
}

// Generated as internal constructor for term cmp_result_invert.
pub fn constructor_cmp_result_invert<C: Context>(ctx: &mut C, arg0: Reg) -> CmpResult {
    let v2 = CmpResult::Result {
        result: arg0,
        invert: true,
    };
    // Rule at src/isa/riscv64/inst.isle line 2600.
    return v2;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: &CmpResult,
    arg1: BranchTarget,
    arg2: BranchTarget,
) -> SideEffectNoResult {
    let v3 = constructor_cmp_integer_compare(ctx, arg0);
    let v4 = MInst::CondBr {
        taken: arg1,
        not_taken: arg2,
        kind: v3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/riscv64/inst.isle line 2604.
    return v5;
}

// Generated as internal constructor for term cmp_integer_compare.
pub fn constructor_cmp_integer_compare<C: Context>(
    ctx: &mut C,
    arg0: &CmpResult,
) -> IntegerCompare {
    if let &CmpResult::Result {
        result: v1,
        invert: v2,
    } = arg0
    {
        match v2 {
            true => {
                let v4 = C::zero_reg(ctx);
                let v7 = C::int_compare(ctx, &IntCC::Equal, v1, v4);
                // Rule at src/isa/riscv64/inst.isle line 2620.
                return v7;
            }
            false => {
                let v4 = C::zero_reg(ctx);
                let v5 = C::int_compare(ctx, &IntCC::NotEqual, v1, v4);
                // Rule at src/isa/riscv64/inst.isle line 2616.
                return v5;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_integer_compare", "src/isa/riscv64/inst.isle line 2613"
    )
}

// Generated as internal constructor for term cmp_value.
pub fn constructor_cmp_value<C: Context>(ctx: &mut C, arg0: &CmpResult) -> Reg {
    if let &CmpResult::Result {
        result: v1,
        invert: v2,
    } = arg0
    {
        match v2 {
            true => {
                let v3 = constructor_not(ctx, v1);
                // Rule at src/isa/riscv64/inst.isle line 2626.
                return v3;
            }
            false => {
                // Rule at src/isa/riscv64/inst.isle line 2625.
                return v1;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_value", "src/isa/riscv64/inst.isle line 2624"
    )
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> CmpResult {
    match arg0 {
        &FloatCC::Equal => {
            let v7 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v8 = &constructor_cmp_result(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 2644.
            return v8.clone();
        }
        &FloatCC::GreaterThan => {
            let v21 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v22 = &constructor_cmp_result(ctx, v21);
            // Rule at src/isa/riscv64/inst.isle line 2675.
            return v22.clone();
        }
        &FloatCC::GreaterThanOrEqual => {
            let v23 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v24 = &constructor_cmp_result(ctx, v23);
            // Rule at src/isa/riscv64/inst.isle line 2680.
            return v24.clone();
        }
        &FloatCC::LessThan => {
            let v10 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v18 = &constructor_cmp_result(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 2665.
            return v18.clone();
        }
        &FloatCC::LessThanOrEqual => {
            let v19 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v20 = &constructor_cmp_result(ctx, v19);
            // Rule at src/isa/riscv64/inst.isle line 2670.
            return v20.clone();
        }
        &FloatCC::NotEqual => {
            let v7 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v9 = &constructor_cmp_result_invert(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 2650.
            return v9.clone();
        }
        &FloatCC::Ordered => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v5 = &constructor_cmp_result(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2633.
            return v5.clone();
        }
        &FloatCC::OrderedNotEqual => {
            let v10 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v11 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v12 = constructor_rv_or(ctx, v10, v11);
            let v13 = &constructor_cmp_result(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 2655.
            return v13.clone();
        }
        &FloatCC::Unordered => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v6 = &constructor_cmp_result_invert(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2639.
            return v6.clone();
        }
        &FloatCC::UnorderedOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v14 = constructor_not(ctx, v4);
            let v15 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v16 = constructor_rv_or(ctx, v14, v15);
            let v17 = &constructor_cmp_result(ctx, v16);
            // Rule at src/isa/riscv64/inst.isle line 2660.
            return v17.clone();
        }
        &FloatCC::UnorderedOrGreaterThan => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v30 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v31 = constructor_rv_and(ctx, v4, v30);
            let v32 = &constructor_cmp_result_invert(ctx, v31);
            // Rule at src/isa/riscv64/inst.isle line 2698.
            return v32.clone();
        }
        &FloatCC::UnorderedOrGreaterThanOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v33 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v34 = constructor_rv_and(ctx, v4, v33);
            let v35 = &constructor_cmp_result_invert(ctx, v34);
            // Rule at src/isa/riscv64/inst.isle line 2704.
            return v35.clone();
        }
        &FloatCC::UnorderedOrLessThan => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v25 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v26 = constructor_rv_and(ctx, v4, v25);
            let v27 = &constructor_cmp_result_invert(ctx, v26);
            // Rule at src/isa/riscv64/inst.isle line 2686.
            return v27.clone();
        }
        &FloatCC::UnorderedOrLessThanOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v11 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v28 = constructor_rv_and(ctx, v4, v11);
            let v29 = &constructor_cmp_result_invert(ctx, v28);
            // Rule at src/isa/riscv64/inst.isle line 2692.
            return v29.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_fcmp", "src/isa/riscv64/inst.isle line 2629"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v617,
            args: ref v618,
            flags: v619,
        } => {
            if let &Opcode::AtomicCas = v617 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v554 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v555) = v554 {
                        let v588 = C::temp_writable_reg(ctx, v555);
                        let v624 = C::temp_writable_reg(ctx, v555);
                        let v620 = C::unpack_value_array_3(ctx, v618);
                        let v625 = C::put_in_reg(ctx, v620.0);
                        let v626 = constructor_gen_atomic_offset(ctx, v625, v555);
                        let v627 = C::put_in_regs(ctx, v620.1);
                        let v628 = constructor_ext_int_if_need(ctx, false, v627, v555);
                        let v629 = constructor_convert_valueregs_reg(ctx, v628);
                        let v630 = C::put_in_reg(ctx, v620.0);
                        let v631 = constructor_gen_atomic_p(ctx, v630, v555);
                        let v632 = C::put_in_reg(ctx, v620.2);
                        let v633 = MInst::AtomicCas {
                            offset: v626,
                            t0: v588,
                            dst: v624,
                            e: v629,
                            addr: v631,
                            v: v632,
                            ty: v555,
                        };
                        let v634 = C::emit(ctx, &v633);
                        let v635 = C::writable_reg_to_reg(ctx, v624);
                        let v636 = constructor_output_reg(ctx, v635);
                        // Rule at src/isa/riscv64/lower.isle line 645.
                        return Some(v636);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v556,
            args: ref v557,
            flags: v558,
            op: ref v559,
        } => {
            if let &Opcode::AtomicRmw = v556 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v554 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v555) = v554 {
                        let v569 = C::fits_in_16(ctx, v555);
                        if let Some(v570) = v569 {
                            let v575 = C::is_atomic_rmw_max_etc(ctx, v559);
                            if let Some(v576) = v575 {
                                match v576.1 {
                                    true => {
                                        let v560 = C::unpack_value_array_2(ctx, v557);
                                        let v571 = C::put_in_reg(ctx, v560.0);
                                        let v579 = C::put_in_regs(ctx, v560.1);
                                        let v580 =
                                            constructor_ext_int_if_need(ctx, true, v579, v570);
                                        let v581 = constructor_convert_valueregs_reg(ctx, v580);
                                        let v582 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v576.0, v570, v571, v581,
                                        );
                                        let v583 = constructor_output_reg(ctx, v582);
                                        // Rule at src/isa/riscv64/lower.isle line 577.
                                        return Some(v583);
                                    }
                                    false => {
                                        let v560 = C::unpack_value_array_2(ctx, v557);
                                        let v571 = C::put_in_reg(ctx, v560.0);
                                        let v579 = C::put_in_regs(ctx, v560.1);
                                        let v584 =
                                            constructor_ext_int_if_need(ctx, false, v579, v570);
                                        let v585 = constructor_convert_valueregs_reg(ctx, v584);
                                        let v586 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v576.0, v570, v571, v585,
                                        );
                                        let v587 = constructor_output_reg(ctx, v586);
                                        // Rule at src/isa/riscv64/lower.isle line 583.
                                        return Some(v587);
                                    }
                                    _ => {}
                                }
                            }
                            let v560 = C::unpack_value_array_2(ctx, v557);
                            let v571 = C::put_in_reg(ctx, v560.0);
                            let v572 = C::put_in_reg(ctx, v560.1);
                            let v573 = constructor_gen_atomic_rmw_loop(ctx, v559, v570, v571, v572);
                            let v574 = constructor_output_reg(ctx, v573);
                            // Rule at src/isa/riscv64/lower.isle line 570.
                            return Some(v574);
                        }
                        match v559 {
                            &AtomicRmwOp::Nand => {
                                let v560 = C::unpack_value_array_2(ctx, v557);
                                let v571 = C::put_in_reg(ctx, v560.0);
                                let v572 = C::put_in_reg(ctx, v560.1);
                                let v597 = constructor_gen_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRmwOp::Nand,
                                    v555,
                                    v571,
                                    v572,
                                );
                                let v598 = constructor_output_reg(ctx, v597);
                                // Rule at src/isa/riscv64/lower.isle line 610.
                                return Some(v598);
                            }
                            &AtomicRmwOp::Sub => {
                                let v588 = C::temp_writable_reg(ctx, v555);
                                let v560 = C::unpack_value_array_2(ctx, v557);
                                let v572 = C::put_in_reg(ctx, v560.1);
                                let v589 = constructor_rv_neg(ctx, v572);
                                let v591 =
                                    &constructor_get_atomic_rmw_op(ctx, v555, &AtomicRmwOp::Add);
                                let v592 = C::put_in_reg(ctx, v560.0);
                                let v593 = C::atomic_amo(ctx);
                                let v594 = constructor_gen_atomic(ctx, v591, v592, v589, v593);
                                let v595 = constructor_output_reg(ctx, v594);
                                // Rule at src/isa/riscv64/lower.isle line 592.
                                return Some(v595);
                            }
                            _ => {}
                        }
                        let v563 = &constructor_get_atomic_rmw_op(ctx, v555, v559);
                        let v560 = C::unpack_value_array_2(ctx, v557);
                        let v564 = C::put_in_reg(ctx, v560.0);
                        let v565 = C::put_in_reg(ctx, v560.1);
                        let v566 = C::atomic_amo(ctx);
                        let v567 = constructor_gen_atomic(ctx, v563, v564, v565, v566);
                        let v568 = constructor_output_reg(ctx, v567);
                        // Rule at src/isa/riscv64/lower.isle line 563.
                        return Some(v568);
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v29,
            args: ref v30,
        } => {
            match v29 {
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v129 = C::put_in_regs(ctx, v31.0);
                        let v3 = C::value_type(ctx, v2);
                        let v719 = constructor_ext_int_if_need(ctx, true, v129, v3);
                        let v132 = C::put_in_regs(ctx, v31.1);
                        let v720 = constructor_ext_int_if_need(ctx, true, v132, v3);
                        let v724 =
                            constructor_gen_int_select(ctx, v3, &IntSelectOP::Smin, v719, v720);
                        let v725 = C::output(ctx, v724);
                        // Rule at src/isa/riscv64/lower.isle line 752.
                        return Some(v725);
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v129 = C::put_in_regs(ctx, v31.0);
                        let v3 = C::value_type(ctx, v2);
                        let v727 = constructor_ext_int_if_need(ctx, false, v129, v3);
                        let v132 = C::put_in_regs(ctx, v31.1);
                        let v728 = constructor_ext_int_if_need(ctx, false, v132, v3);
                        let v732 =
                            constructor_gen_int_select(ctx, v3, &IntSelectOP::Umin, v727, v728);
                        let v733 = C::output(ctx, v732);
                        // Rule at src/isa/riscv64/lower.isle line 761.
                        return Some(v733);
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v129 = C::put_in_regs(ctx, v31.0);
                        let v3 = C::value_type(ctx, v2);
                        let v719 = constructor_ext_int_if_need(ctx, true, v129, v3);
                        let v132 = C::put_in_regs(ctx, v31.1);
                        let v720 = constructor_ext_int_if_need(ctx, true, v132, v3);
                        let v721 =
                            constructor_gen_int_select(ctx, v3, &IntSelectOP::Smax, v719, v720);
                        let v722 = C::output(ctx, v721);
                        // Rule at src/isa/riscv64/lower.isle line 747.
                        return Some(v722);
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v129 = C::put_in_regs(ctx, v31.0);
                        let v3 = C::value_type(ctx, v2);
                        let v727 = constructor_ext_int_if_need(ctx, false, v129, v3);
                        let v132 = C::put_in_regs(ctx, v31.1);
                        let v728 = constructor_ext_int_if_need(ctx, false, v132, v3);
                        let v729 =
                            constructor_gen_int_select(ctx, v3, &IntSelectOP::Umax, v727, v728);
                        let v730 = C::output(ctx, v729);
                        // Rule at src/isa/riscv64/lower.isle line 756.
                        return Some(v730);
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v63 = C::has_zba(ctx);
                                if v63 == true {
                                    let v31 = C::unpack_value_array_2(ctx, v30);
                                    let v50 = C::def_inst(ctx, v31.0);
                                    if let Some(v51) = v50 {
                                        let v52 = &C::inst_data(ctx, v51);
                                        if let &InstructionData::Binary {
                                            opcode: ref v90,
                                            args: ref v91,
                                        } = v52
                                        {
                                            if let &Opcode::Ishl = v90 {
                                                let v92 = C::unpack_value_array_2(ctx, v91);
                                                let v95 = C::maybe_uextend(ctx, v92.1);
                                                if let Some(v96) = v95 {
                                                    let v97 = C::def_inst(ctx, v96);
                                                    if let Some(v98) = v97 {
                                                        let v99 = &C::inst_data(ctx, v98);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v100,
                                                            imm: v101,
                                                        } = v99
                                                        {
                                                            if let &Opcode::Iconst = v100 {
                                                                let v118 = C::def_inst(ctx, v92.0);
                                                                if let Some(v119) = v118 {
                                                                    let v120 =
                                                                        &C::inst_data(ctx, v119);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v121,
                                                                        arg: v122,
                                                                    } = v120 {
                                                                        if let &Opcode::Uextend = v121 {
                                                                            let v123 = C::value_type(ctx, v122);
                                                                            if v123 == I32 {
                                                                                let v124 = &constructor_match_shnadd_uw(ctx, v101);
                                                                                if let Some(v125) = v124 {
                                                                                    let v126 = C::put_in_reg(ctx, v122);
                                                                                    let v35 = C::put_in_reg(ctx, v31.1);
                                                                                    let v127 = constructor_alu_rrr(ctx, v125, v126, v35);
                                                                                    let v128 = constructor_output_reg(ctx, v127);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 84.
                                                                                    return Some(v128);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v38 = C::def_inst(ctx, v31.1);
                                    if let Some(v39) = v38 {
                                        let v40 = &C::inst_data(ctx, v39);
                                        if let &InstructionData::Binary {
                                            opcode: ref v73,
                                            args: ref v74,
                                        } = v40
                                        {
                                            if let &Opcode::Ishl = v73 {
                                                let v75 = C::unpack_value_array_2(ctx, v74);
                                                let v78 = C::maybe_uextend(ctx, v75.1);
                                                if let Some(v79) = v78 {
                                                    let v80 = C::def_inst(ctx, v79);
                                                    if let Some(v81) = v80 {
                                                        let v82 = &C::inst_data(ctx, v81);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v83,
                                                            imm: v84,
                                                        } = v82
                                                        {
                                                            if let &Opcode::Iconst = v83 {
                                                                let v107 = C::def_inst(ctx, v75.0);
                                                                if let Some(v108) = v107 {
                                                                    let v109 =
                                                                        &C::inst_data(ctx, v108);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v110,
                                                                        arg: v111,
                                                                    } = v109 {
                                                                        if let &Opcode::Uextend = v110 {
                                                                            let v112 = C::value_type(ctx, v111);
                                                                            if v112 == I32 {
                                                                                let v113 = &constructor_match_shnadd_uw(ctx, v84);
                                                                                if let Some(v114) = v113 {
                                                                                    let v115 = C::put_in_reg(ctx, v111);
                                                                                    let v47 = C::put_in_reg(ctx, v31.0);
                                                                                    let v116 = constructor_alu_rrr(ctx, v114, v115, v47);
                                                                                    let v117 = constructor_output_reg(ctx, v116);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 79.
                                                                                    return Some(v117);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if let Some(v51) = v50 {
                                        let v52 = &C::inst_data(ctx, v51);
                                        match v52 {
                                            &InstructionData::Binary {
                                                opcode: ref v90,
                                                args: ref v91,
                                            } => {
                                                if let &Opcode::Ishl = v90 {
                                                    let v92 = C::unpack_value_array_2(ctx, v91);
                                                    let v95 = C::maybe_uextend(ctx, v92.1);
                                                    if let Some(v96) = v95 {
                                                        let v97 = C::def_inst(ctx, v96);
                                                        if let Some(v98) = v97 {
                                                            let v99 = &C::inst_data(ctx, v98);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v100,
                                                                imm: v101,
                                                            } = v99
                                                            {
                                                                if let &Opcode::Iconst = v100 {
                                                                    let v102 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v101,
                                                                        );
                                                                    if let Some(v103) = v102 {
                                                                        let v104 = C::put_in_reg(
                                                                            ctx, v92.0,
                                                                        );
                                                                        let v35 = C::put_in_reg(
                                                                            ctx, v31.1,
                                                                        );
                                                                        let v105 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v103, v104,
                                                                                v35,
                                                                            );
                                                                        let v106 =
                                                                            constructor_output_reg(
                                                                                ctx, v105,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 62.
                                                                        return Some(v106);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v67,
                                                arg: v68,
                                            } => {
                                                if let &Opcode::Uextend = v67 {
                                                    let v69 = C::value_type(ctx, v68);
                                                    if v69 == I32 {
                                                        let v70 = C::put_in_reg(ctx, v68);
                                                        let v35 = C::put_in_reg(ctx, v31.1);
                                                        let v71 =
                                                            constructor_rv_adduw(ctx, v70, v35);
                                                        let v72 = constructor_output_reg(ctx, v71);
                                                        // Rule at src/isa/riscv64/lower.isle line 47.
                                                        return Some(v72);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    if let Some(v39) = v38 {
                                        let v40 = &C::inst_data(ctx, v39);
                                        match v40 {
                                            &InstructionData::Binary {
                                                opcode: ref v73,
                                                args: ref v74,
                                            } => {
                                                if let &Opcode::Ishl = v73 {
                                                    let v75 = C::unpack_value_array_2(ctx, v74);
                                                    let v78 = C::maybe_uextend(ctx, v75.1);
                                                    if let Some(v79) = v78 {
                                                        let v80 = C::def_inst(ctx, v79);
                                                        if let Some(v81) = v80 {
                                                            let v82 = &C::inst_data(ctx, v81);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v83,
                                                                imm: v84,
                                                            } = v82
                                                            {
                                                                if let &Opcode::Iconst = v83 {
                                                                    let v85 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v84,
                                                                        );
                                                                    if let Some(v86) = v85 {
                                                                        let v87 = C::put_in_reg(
                                                                            ctx, v75.0,
                                                                        );
                                                                        let v47 = C::put_in_reg(
                                                                            ctx, v31.0,
                                                                        );
                                                                        let v88 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v86, v87, v47,
                                                                            );
                                                                        let v89 =
                                                                            constructor_output_reg(
                                                                                ctx, v88,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 57.
                                                                        return Some(v89);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v60,
                                                arg: v61,
                                            } => {
                                                if let &Opcode::Uextend = v60 {
                                                    let v62 = C::value_type(ctx, v61);
                                                    if v62 == I32 {
                                                        let v64 = C::put_in_reg(ctx, v61);
                                                        let v47 = C::put_in_reg(ctx, v31.0);
                                                        let v65 =
                                                            constructor_rv_adduw(ctx, v64, v47);
                                                        let v66 = constructor_output_reg(ctx, v65);
                                                        // Rule at src/isa/riscv64/lower.isle line 43.
                                                        return Some(v66);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v129 = C::put_in_regs(ctx, v31.0);
                                let v131 = C::value_regs_get(ctx, v129, 0x0);
                                let v132 = C::put_in_regs(ctx, v31.1);
                                let v133 = C::value_regs_get(ctx, v132, 0x0);
                                let v134 = constructor_rv_add(ctx, v131, v133);
                                let v135 = C::put_in_regs(ctx, v31.1);
                                let v136 = C::value_regs_get(ctx, v135, 0x0);
                                let v137 = constructor_rv_sltu(ctx, v134, v136);
                                let v138 = C::put_in_regs(ctx, v31.0);
                                let v140 = C::value_regs_get(ctx, v138, 0x1);
                                let v141 = C::put_in_regs(ctx, v31.1);
                                let v142 = C::value_regs_get(ctx, v141, 0x1);
                                let v143 = constructor_rv_add(ctx, v140, v142);
                                let v144 = constructor_rv_add(ctx, v143, v137);
                                let v145 = C::value_regs(ctx, v134, v144);
                                let v146 = C::output(ctx, v145);
                                // Rule at src/isa/riscv64/lower.isle line 90.
                                return Some(v146);
                            }
                            _ => {}
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v50 = C::def_inst(ctx, v31.0);
                            if let Some(v51) = v50 {
                                let v52 = &C::inst_data(ctx, v51);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v53,
                                    imm: v54,
                                } = v52
                                {
                                    if let &Opcode::Iconst = v53 {
                                        let v55 = C::u64_from_imm64(ctx, v54);
                                        let v56 = C::imm12_from_u64(ctx, v55);
                                        if let Some(v57) = v56 {
                                            let v46 = &constructor_select_addi(ctx, v28);
                                            let v35 = C::put_in_reg(ctx, v31.1);
                                            let v58 = constructor_alu_rr_imm12(ctx, v46, v35, v57);
                                            let v59 = constructor_output_reg(ctx, v58);
                                            // Rule at src/isa/riscv64/lower.isle line 38.
                                            return Some(v59);
                                        }
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v44 = C::imm12_from_u64(ctx, v43);
                                        if let Some(v45) = v44 {
                                            let v46 = &constructor_select_addi(ctx, v28);
                                            let v47 = C::put_in_reg(ctx, v31.0);
                                            let v48 = constructor_alu_rr_imm12(ctx, v46, v47, v45);
                                            let v49 = constructor_output_reg(ctx, v48);
                                            // Rule at src/isa/riscv64/lower.isle line 35.
                                            return Some(v49);
                                        }
                                    }
                                }
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v36 = constructor_rv_add(ctx, v34, v35);
                            let v37 = constructor_output_reg(ctx, v36);
                            // Rule at src/isa/riscv64/lower.isle line 31.
                            return Some(v37);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v129 = C::put_in_regs(ctx, v31.0);
                            let v166 = C::put_in_regs(ctx, v31.1);
                            let v167 = constructor_i128_sub(ctx, v129, v166);
                            let v168 = C::output(ctx, v167);
                            // Rule at src/isa/riscv64/lower.isle line 117.
                            return Some(v168);
                        }
                        let v162 = C::fits_in_32(ctx, v3);
                        if let Some(v163) = v162 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v164 = constructor_rv_subw(ctx, v34, v35);
                            let v165 = constructor_output_reg(ctx, v164);
                            // Rule at src/isa/riscv64/lower.isle line 114.
                            return Some(v165);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v160 = constructor_rv_sub(ctx, v34, v35);
                            let v161 = constructor_output_reg(ctx, v160);
                            // Rule at src/isa/riscv64/lower.isle line 111.
                            return Some(v161);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v129 = C::put_in_regs(ctx, v31.0);
                            let v131 = C::value_regs_get(ctx, v129, 0x0);
                            let v193 = C::value_regs_get(ctx, v129, 0x1);
                            let v181 = C::put_in_regs(ctx, v31.1);
                            let v194 = C::value_regs_get(ctx, v181, 0x0);
                            let v195 = C::value_regs_get(ctx, v181, 0x1);
                            let v196 = constructor_rv_mulhu(ctx, v131, v194);
                            let v197 = constructor_madd(ctx, v131, v195, v196);
                            let v198 = constructor_madd(ctx, v193, v194, v197);
                            let v199 = C::zero_reg(ctx);
                            let v200 = constructor_madd(ctx, v131, v194, v199);
                            let v201 = C::value_regs(ctx, v200, v198);
                            let v202 = C::output(ctx, v201);
                            // Rule at src/isa/riscv64/lower.isle line 142.
                            return Some(v202);
                        }
                        let v162 = C::fits_in_32(ctx, v3);
                        if let Some(v163) = v162 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v176 = constructor_rv_mulw(ctx, v34, v35);
                            let v177 = constructor_output_reg(ctx, v176);
                            // Rule at src/isa/riscv64/lower.isle line 130.
                            return Some(v177);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v174 = constructor_rv_mul(ctx, v34, v35);
                            let v175 = constructor_output_reg(ctx, v174);
                            // Rule at src/isa/riscv64/lower.isle line 128.
                            return Some(v175);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v129 = C::put_in_regs(ctx, v31.0);
                            let v187 = constructor_ext_int_if_need(ctx, false, v129, v28);
                            let v188 = constructor_convert_valueregs_reg(ctx, v187);
                            let v181 = C::put_in_regs(ctx, v31.1);
                            let v189 = constructor_ext_int_if_need(ctx, false, v181, v28);
                            let v190 = constructor_convert_valueregs_reg(ctx, v189);
                            let v191 = constructor_lower_umlhi(ctx, v28, v188, v190);
                            let v192 = constructor_output_reg(ctx, v191);
                            // Rule at src/isa/riscv64/lower.isle line 138.
                            return Some(v192);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v129 = C::put_in_regs(ctx, v31.0);
                            let v179 = constructor_ext_int_if_need(ctx, true, v129, v28);
                            let v180 = constructor_convert_valueregs_reg(ctx, v179);
                            let v181 = C::put_in_regs(ctx, v31.1);
                            let v182 = constructor_ext_int_if_need(ctx, true, v181, v28);
                            let v183 = constructor_convert_valueregs_reg(ctx, v182);
                            let v184 = constructor_lower_smlhi(ctx, v28, v180, v183);
                            let v185 = constructor_output_reg(ctx, v184);
                            // Rule at src/isa/riscv64/lower.isle line 134.
                            return Some(v185);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v228 = C::put_in_reg(ctx, v31.1);
                            let v229 = constructor_gen_div_by_zero(ctx, v228);
                            let v230 = C::put_in_reg(ctx, v31.0);
                            let v222 = C::put_in_reg(ctx, v31.1);
                            let v231 = constructor_rv_divu(ctx, v230, v222);
                            let v232 = constructor_output_reg(ctx, v231);
                            // Rule at src/isa/riscv64/lower.isle line 191.
                            return Some(v232);
                        }
                        let v162 = C::fits_in_32(ctx, v3);
                        if let Some(v163) = v162 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v203 = C::put_in_regs(ctx, v31.1);
                            let v204 = constructor_ext_int_if_need(ctx, false, v203, v163);
                            let v205 = constructor_convert_valueregs_reg(ctx, v204);
                            let v206 = constructor_gen_div_by_zero(ctx, v205);
                            let v207 = C::put_in_regs(ctx, v31.0);
                            let v208 = constructor_ext_int_if_need(ctx, false, v207, v163);
                            let v209 = constructor_convert_valueregs_reg(ctx, v208);
                            let v210 = constructor_rv_divuw(ctx, v209, v205);
                            let v211 = constructor_output_reg(ctx, v210);
                            // Rule at src/isa/riscv64/lower.isle line 171.
                            return Some(v211);
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v221 = constructor_gen_div_overflow(ctx, v34, v35, I64);
                            let v222 = C::put_in_reg(ctx, v31.1);
                            let v223 = constructor_gen_div_by_zero(ctx, v222);
                            let v224 = C::put_in_reg(ctx, v31.0);
                            let v225 = C::put_in_reg(ctx, v31.1);
                            let v226 = constructor_rv_div(ctx, v224, v225);
                            let v227 = constructor_output_reg(ctx, v226);
                            // Rule at src/isa/riscv64/lower.isle line 185.
                            return Some(v227);
                        }
                        let v162 = C::fits_in_32(ctx, v3);
                        if let Some(v163) = v162 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v129 = C::put_in_regs(ctx, v31.0);
                            let v212 = constructor_ext_int_if_need(ctx, true, v129, v163);
                            let v213 = constructor_convert_valueregs_reg(ctx, v212);
                            let v181 = C::put_in_regs(ctx, v31.1);
                            let v214 = constructor_ext_int_if_need(ctx, true, v181, v163);
                            let v215 = constructor_convert_valueregs_reg(ctx, v214);
                            let v216 = constructor_gen_div_overflow(ctx, v213, v215, v163);
                            let v217 = constructor_gen_div_by_zero(ctx, v215);
                            let v218 = constructor_rv_divw(ctx, v213, v215);
                            let v219 = constructor_output_reg(ctx, v218);
                            // Rule at src/isa/riscv64/lower.isle line 177.
                            return Some(v219);
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v203 = C::put_in_regs(ctx, v31.1);
                                let v256 = constructor_ext_int_if_need(ctx, false, v203, I32);
                                let v257 = constructor_convert_valueregs_reg(ctx, v256);
                                let v258 = constructor_gen_div_by_zero(ctx, v257);
                                let v253 = C::put_in_reg(ctx, v31.0);
                                let v259 = constructor_rv_remuw(ctx, v253, v257);
                                let v260 = constructor_output_reg(ctx, v259);
                                // Rule at src/isa/riscv64/lower.isle line 216.
                                return Some(v260);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v228 = C::put_in_reg(ctx, v31.1);
                                let v229 = constructor_gen_div_by_zero(ctx, v228);
                                let v230 = C::put_in_reg(ctx, v31.0);
                                let v222 = C::put_in_reg(ctx, v31.1);
                                let v263 = constructor_rv_remu(ctx, v230, v222);
                                let v264 = constructor_output_reg(ctx, v263);
                                // Rule at src/isa/riscv64/lower.isle line 227.
                                return Some(v264);
                            }
                            _ => {}
                        }
                        let v233 = C::fits_in_16(ctx, v3);
                        if let Some(v234) = v233 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v203 = C::put_in_regs(ctx, v31.1);
                            let v235 = constructor_ext_int_if_need(ctx, false, v203, v234);
                            let v236 = constructor_convert_valueregs_reg(ctx, v235);
                            let v237 = constructor_gen_div_by_zero(ctx, v236);
                            let v207 = C::put_in_regs(ctx, v31.0);
                            let v238 = constructor_ext_int_if_need(ctx, false, v207, v234);
                            let v239 = constructor_convert_valueregs_reg(ctx, v238);
                            let v240 = constructor_rv_remuw(ctx, v239, v236);
                            let v241 = constructor_output_reg(ctx, v240);
                            // Rule at src/isa/riscv64/lower.isle line 198.
                            return Some(v241);
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v203 = C::put_in_regs(ctx, v31.1);
                                let v250 = constructor_ext_int_if_need(ctx, true, v203, I32);
                                let v251 = constructor_convert_valueregs_reg(ctx, v250);
                                let v252 = constructor_gen_div_by_zero(ctx, v251);
                                let v253 = C::put_in_reg(ctx, v31.0);
                                let v254 = constructor_rv_remw(ctx, v253, v251);
                                let v255 = constructor_output_reg(ctx, v254);
                                // Rule at src/isa/riscv64/lower.isle line 210.
                                return Some(v255);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v228 = C::put_in_reg(ctx, v31.1);
                                let v229 = constructor_gen_div_by_zero(ctx, v228);
                                let v230 = C::put_in_reg(ctx, v31.0);
                                let v222 = C::put_in_reg(ctx, v31.1);
                                let v261 = constructor_rv_rem(ctx, v230, v222);
                                let v262 = constructor_output_reg(ctx, v261);
                                // Rule at src/isa/riscv64/lower.isle line 222.
                                return Some(v262);
                            }
                            _ => {}
                        }
                        let v233 = C::fits_in_16(ctx, v3);
                        if let Some(v234) = v233 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v203 = C::put_in_regs(ctx, v31.1);
                            let v242 = constructor_ext_int_if_need(ctx, true, v203, v234);
                            let v243 = constructor_convert_valueregs_reg(ctx, v242);
                            let v244 = constructor_gen_div_by_zero(ctx, v243);
                            let v207 = C::put_in_regs(ctx, v31.0);
                            let v245 = constructor_ext_int_if_need(ctx, true, v207, v234);
                            let v246 = constructor_convert_valueregs_reg(ctx, v245);
                            let v247 = constructor_rv_remw(ctx, v246, v243);
                            let v248 = constructor_output_reg(ctx, v247);
                            // Rule at src/isa/riscv64/lower.isle line 204.
                            return Some(v248);
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v280 = C::has_zbb(ctx);
                        if v280 == true {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I128 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v50 = C::def_inst(ctx, v31.0);
                                if let Some(v51) = v50 {
                                    let v52 = &C::inst_data(ctx, v51);
                                    if let &InstructionData::Unary {
                                        opcode: ref v67,
                                        arg: v68,
                                    } = v52
                                    {
                                        if let &Opcode::Bnot = v67 {
                                            let v203 = C::put_in_regs(ctx, v31.1);
                                            let v297 = C::value_regs_get(ctx, v203, 0x0);
                                            let v298 = C::put_in_regs(ctx, v68);
                                            let v299 = C::value_regs_get(ctx, v298, 0x0);
                                            let v300 = constructor_rv_andn(ctx, v297, v299);
                                            let v135 = C::put_in_regs(ctx, v31.1);
                                            let v301 = C::value_regs_get(ctx, v135, 0x1);
                                            let v302 = C::put_in_regs(ctx, v68);
                                            let v303 = C::value_regs_get(ctx, v302, 0x1);
                                            let v304 = constructor_rv_andn(ctx, v301, v303);
                                            let v305 = C::value_regs(ctx, v300, v304);
                                            let v306 = C::output(ctx, v305);
                                            // Rule at src/isa/riscv64/lower.isle line 271.
                                            return Some(v306);
                                        }
                                    }
                                }
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v60,
                                        arg: v61,
                                    } = v40
                                    {
                                        if let &Opcode::Bnot = v60 {
                                            let v129 = C::put_in_regs(ctx, v31.0);
                                            let v131 = C::value_regs_get(ctx, v129, 0x0);
                                            let v287 = C::put_in_regs(ctx, v61);
                                            let v288 = C::value_regs_get(ctx, v287, 0x0);
                                            let v289 = constructor_rv_andn(ctx, v131, v288);
                                            let v290 = C::put_in_regs(ctx, v31.0);
                                            let v291 = C::value_regs_get(ctx, v290, 0x1);
                                            let v292 = C::put_in_regs(ctx, v61);
                                            let v293 = C::value_regs_get(ctx, v292, 0x1);
                                            let v294 = constructor_rv_andn(ctx, v291, v293);
                                            let v295 = C::value_regs(ctx, v289, v294);
                                            let v296 = C::output(ctx, v295);
                                            // Rule at src/isa/riscv64/lower.isle line 264.
                                            return Some(v296);
                                        }
                                    }
                                }
                            }
                            let v27 = C::fits_in_64(ctx, v3);
                            if let Some(v28) = v27 {
                                let v265 = C::ty_int(ctx, v28);
                                if let Some(v266) = v265 {
                                    let v31 = C::unpack_value_array_2(ctx, v30);
                                    let v50 = C::def_inst(ctx, v31.0);
                                    if let Some(v51) = v50 {
                                        let v52 = &C::inst_data(ctx, v51);
                                        if let &InstructionData::Unary {
                                            opcode: ref v67,
                                            arg: v68,
                                        } = v52
                                        {
                                            if let &Opcode::Bnot = v67 {
                                                let v228 = C::put_in_reg(ctx, v31.1);
                                                let v284 = C::put_in_reg(ctx, v68);
                                                let v285 = constructor_rv_andn(ctx, v228, v284);
                                                let v286 = constructor_output_reg(ctx, v285);
                                                // Rule at src/isa/riscv64/lower.isle line 260.
                                                return Some(v286);
                                            }
                                        }
                                    }
                                    let v38 = C::def_inst(ctx, v31.1);
                                    if let Some(v39) = v38 {
                                        let v40 = &C::inst_data(ctx, v39);
                                        if let &InstructionData::Unary {
                                            opcode: ref v60,
                                            arg: v61,
                                        } = v40
                                        {
                                            if let &Opcode::Bnot = v60 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v281 = C::put_in_reg(ctx, v61);
                                                let v282 = constructor_rv_andn(ctx, v34, v281);
                                                let v283 = constructor_output_reg(ctx, v282);
                                                // Rule at src/isa/riscv64/lower.isle line 256.
                                                return Some(v283);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v265 = C::ty_int(ctx, v28);
                            if let Some(v266) = v265 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v269 = constructor_rv_andi(ctx, v34, v45);
                                                let v270 = constructor_output_reg(ctx, v269);
                                                // Rule at src/isa/riscv64/lower.isle line 237.
                                                return Some(v270);
                                            }
                                        }
                                    }
                                }
                                let v50 = C::def_inst(ctx, v31.0);
                                if let Some(v51) = v50 {
                                    let v52 = &C::inst_data(ctx, v51);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v53,
                                        imm: v54,
                                    } = v52
                                    {
                                        if let &Opcode::Iconst = v53 {
                                            let v55 = C::u64_from_imm64(ctx, v54);
                                            let v56 = C::imm12_from_u64(ctx, v55);
                                            if let Some(v57) = v56 {
                                                let v228 = C::put_in_reg(ctx, v31.1);
                                                let v271 = constructor_rv_andi(ctx, v228, v57);
                                                let v272 = constructor_output_reg(ctx, v271);
                                                // Rule at src/isa/riscv64/lower.isle line 240.
                                                return Some(v272);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v129 = C::put_in_regs(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v274 =
                                    constructor_lower_b128_binary(ctx, &AluOPRRR::And, v129, v166);
                                let v275 = C::output(ctx, v274);
                                // Rule at src/isa/riscv64/lower.isle line 243.
                                return Some(v275);
                            }
                            F32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v276 = constructor_lower_float_binary(
                                    ctx,
                                    &AluOPRRR::And,
                                    v34,
                                    v35,
                                    F32,
                                );
                                let v277 = constructor_output_reg(ctx, v276);
                                // Rule at src/isa/riscv64/lower.isle line 246.
                                return Some(v277);
                            }
                            F64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v278 = constructor_lower_float_binary(
                                    ctx,
                                    &AluOPRRR::And,
                                    v34,
                                    v35,
                                    F64,
                                );
                                let v279 = constructor_output_reg(ctx, v278);
                                // Rule at src/isa/riscv64/lower.isle line 249.
                                return Some(v279);
                            }
                            _ => {}
                        }
                        if let Some(v28) = v27 {
                            let v265 = C::ty_int(ctx, v28);
                            if let Some(v266) = v265 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v267 = constructor_rv_and(ctx, v34, v35);
                                let v268 = constructor_output_reg(ctx, v267);
                                // Rule at src/isa/riscv64/lower.isle line 233.
                                return Some(v268);
                            }
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v280 = C::has_zbb(ctx);
                        if v280 == true {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I128 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v50 = C::def_inst(ctx, v31.0);
                                if let Some(v51) = v50 {
                                    let v52 = &C::inst_data(ctx, v51);
                                    if let &InstructionData::Unary {
                                        opcode: ref v67,
                                        arg: v68,
                                    } = v52
                                    {
                                        if let &Opcode::Bnot = v67 {
                                            let v203 = C::put_in_regs(ctx, v31.1);
                                            let v297 = C::value_regs_get(ctx, v203, 0x0);
                                            let v298 = C::put_in_regs(ctx, v68);
                                            let v299 = C::value_regs_get(ctx, v298, 0x0);
                                            let v328 = constructor_rv_orn(ctx, v297, v299);
                                            let v135 = C::put_in_regs(ctx, v31.1);
                                            let v301 = C::value_regs_get(ctx, v135, 0x1);
                                            let v302 = C::put_in_regs(ctx, v68);
                                            let v303 = C::value_regs_get(ctx, v302, 0x1);
                                            let v329 = constructor_rv_orn(ctx, v301, v303);
                                            let v330 = C::value_regs(ctx, v328, v329);
                                            let v331 = C::output(ctx, v330);
                                            // Rule at src/isa/riscv64/lower.isle line 318.
                                            return Some(v331);
                                        }
                                    }
                                }
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v60,
                                        arg: v61,
                                    } = v40
                                    {
                                        if let &Opcode::Bnot = v60 {
                                            let v129 = C::put_in_regs(ctx, v31.0);
                                            let v131 = C::value_regs_get(ctx, v129, 0x0);
                                            let v287 = C::put_in_regs(ctx, v61);
                                            let v288 = C::value_regs_get(ctx, v287, 0x0);
                                            let v324 = constructor_rv_orn(ctx, v131, v288);
                                            let v290 = C::put_in_regs(ctx, v31.0);
                                            let v291 = C::value_regs_get(ctx, v290, 0x1);
                                            let v292 = C::put_in_regs(ctx, v61);
                                            let v293 = C::value_regs_get(ctx, v292, 0x1);
                                            let v325 = constructor_rv_orn(ctx, v291, v293);
                                            let v326 = C::value_regs(ctx, v324, v325);
                                            let v327 = C::output(ctx, v326);
                                            // Rule at src/isa/riscv64/lower.isle line 311.
                                            return Some(v327);
                                        }
                                    }
                                }
                            }
                            let v27 = C::fits_in_64(ctx, v3);
                            if let Some(v28) = v27 {
                                let v265 = C::ty_int(ctx, v28);
                                if let Some(v266) = v265 {
                                    let v31 = C::unpack_value_array_2(ctx, v30);
                                    let v50 = C::def_inst(ctx, v31.0);
                                    if let Some(v51) = v50 {
                                        let v52 = &C::inst_data(ctx, v51);
                                        if let &InstructionData::Unary {
                                            opcode: ref v67,
                                            arg: v68,
                                        } = v52
                                        {
                                            if let &Opcode::Bnot = v67 {
                                                let v228 = C::put_in_reg(ctx, v31.1);
                                                let v284 = C::put_in_reg(ctx, v68);
                                                let v322 = constructor_rv_orn(ctx, v228, v284);
                                                let v323 = constructor_output_reg(ctx, v322);
                                                // Rule at src/isa/riscv64/lower.isle line 307.
                                                return Some(v323);
                                            }
                                        }
                                    }
                                    let v38 = C::def_inst(ctx, v31.1);
                                    if let Some(v39) = v38 {
                                        let v40 = &C::inst_data(ctx, v39);
                                        if let &InstructionData::Unary {
                                            opcode: ref v60,
                                            arg: v61,
                                        } = v40
                                        {
                                            if let &Opcode::Bnot = v60 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v281 = C::put_in_reg(ctx, v61);
                                                let v320 = constructor_rv_orn(ctx, v34, v281);
                                                let v321 = constructor_output_reg(ctx, v320);
                                                // Rule at src/isa/riscv64/lower.isle line 303.
                                                return Some(v321);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v265 = C::ty_int(ctx, v28);
                            if let Some(v266) = v265 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v309 = constructor_rv_ori(ctx, v34, v45);
                                                let v310 = constructor_output_reg(ctx, v309);
                                                // Rule at src/isa/riscv64/lower.isle line 284.
                                                return Some(v310);
                                            }
                                        }
                                    }
                                }
                                let v50 = C::def_inst(ctx, v31.0);
                                if let Some(v51) = v50 {
                                    let v52 = &C::inst_data(ctx, v51);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v53,
                                        imm: v54,
                                    } = v52
                                    {
                                        if let &Opcode::Iconst = v53 {
                                            let v55 = C::u64_from_imm64(ctx, v54);
                                            let v56 = C::imm12_from_u64(ctx, v55);
                                            if let Some(v57) = v56 {
                                                let v228 = C::put_in_reg(ctx, v31.1);
                                                let v311 = constructor_rv_ori(ctx, v228, v57);
                                                let v312 = constructor_output_reg(ctx, v311);
                                                // Rule at src/isa/riscv64/lower.isle line 287.
                                                return Some(v312);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v129 = C::put_in_regs(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v314 =
                                    constructor_lower_b128_binary(ctx, &AluOPRRR::Or, v129, v166);
                                let v315 = C::output(ctx, v314);
                                // Rule at src/isa/riscv64/lower.isle line 290.
                                return Some(v315);
                            }
                            F32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v316 = constructor_lower_float_binary(
                                    ctx,
                                    &AluOPRRR::Or,
                                    v34,
                                    v35,
                                    F32,
                                );
                                let v317 = constructor_output_reg(ctx, v316);
                                // Rule at src/isa/riscv64/lower.isle line 293.
                                return Some(v317);
                            }
                            F64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v318 = constructor_lower_float_binary(
                                    ctx,
                                    &AluOPRRR::Or,
                                    v34,
                                    v35,
                                    F64,
                                );
                                let v319 = constructor_output_reg(ctx, v318);
                                // Rule at src/isa/riscv64/lower.isle line 296.
                                return Some(v319);
                            }
                            _ => {}
                        }
                        if let Some(v28) = v27 {
                            let v265 = C::ty_int(ctx, v28);
                            if let Some(v266) = v265 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v307 = constructor_rv_or(ctx, v34, v35);
                                let v308 = constructor_output_reg(ctx, v307);
                                // Rule at src/isa/riscv64/lower.isle line 280.
                                return Some(v308);
                            }
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v265 = C::ty_int(ctx, v28);
                            if let Some(v266) = v265 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v334 = constructor_rv_xori(ctx, v34, v45);
                                                let v335 = constructor_output_reg(ctx, v334);
                                                // Rule at src/isa/riscv64/lower.isle line 331.
                                                return Some(v335);
                                            }
                                        }
                                    }
                                }
                                let v50 = C::def_inst(ctx, v31.0);
                                if let Some(v51) = v50 {
                                    let v52 = &C::inst_data(ctx, v51);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v53,
                                        imm: v54,
                                    } = v52
                                    {
                                        if let &Opcode::Iconst = v53 {
                                            let v55 = C::u64_from_imm64(ctx, v54);
                                            let v56 = C::imm12_from_u64(ctx, v55);
                                            if let Some(v57) = v56 {
                                                let v228 = C::put_in_reg(ctx, v31.1);
                                                let v336 = constructor_rv_xori(ctx, v228, v57);
                                                let v337 = constructor_output_reg(ctx, v336);
                                                // Rule at src/isa/riscv64/lower.isle line 334.
                                                return Some(v337);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v129 = C::put_in_regs(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v339 =
                                    constructor_lower_b128_binary(ctx, &AluOPRRR::Xor, v129, v166);
                                let v340 = C::output(ctx, v339);
                                // Rule at src/isa/riscv64/lower.isle line 337.
                                return Some(v340);
                            }
                            F32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v341 = constructor_lower_float_binary(
                                    ctx,
                                    &AluOPRRR::Xor,
                                    v34,
                                    v35,
                                    F32,
                                );
                                let v342 = constructor_output_reg(ctx, v341);
                                // Rule at src/isa/riscv64/lower.isle line 340.
                                return Some(v342);
                            }
                            F64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v343 = constructor_lower_float_binary(
                                    ctx,
                                    &AluOPRRR::Xor,
                                    v34,
                                    v35,
                                    F64,
                                );
                                let v344 = constructor_output_reg(ctx, v343);
                                // Rule at src/isa/riscv64/lower.isle line 343.
                                return Some(v344);
                            }
                            _ => {}
                        }
                        if let Some(v28) = v27 {
                            let v265 = C::ty_int(ctx, v28);
                            if let Some(v266) = v265 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v332 = constructor_rv_xor(ctx, v34, v35);
                                let v333 = constructor_output_reg(ctx, v332);
                                // Rule at src/isa/riscv64/lower.isle line 327.
                                return Some(v333);
                            }
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v129 = C::put_in_regs(ctx, v31.0);
                            let v166 = C::put_in_regs(ctx, v31.1);
                            let v529 = constructor_lower_i128_rotl(ctx, v129, v166);
                            let v530 = C::output(ctx, v529);
                            // Rule at src/isa/riscv64/lower.isle line 529.
                            return Some(v530);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v129 = C::put_in_regs(ctx, v31.0);
                            let v187 = constructor_ext_int_if_need(ctx, false, v129, v28);
                            let v188 = constructor_convert_valueregs_reg(ctx, v187);
                            let v181 = C::put_in_regs(ctx, v31.1);
                            let v194 = C::value_regs_get(ctx, v181, 0x0);
                            let v527 = constructor_lower_rotl(ctx, v28, v188, v194);
                            let v528 = constructor_output_reg(ctx, v527);
                            // Rule at src/isa/riscv64/lower.isle line 526.
                            return Some(v528);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v129 = C::put_in_regs(ctx, v31.0);
                            let v166 = C::put_in_regs(ctx, v31.1);
                            let v533 = constructor_lower_i128_rotr(ctx, v129, v166);
                            let v534 = C::output(ctx, v533);
                            // Rule at src/isa/riscv64/lower.isle line 536.
                            return Some(v534);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v129 = C::put_in_regs(ctx, v31.0);
                            let v187 = constructor_ext_int_if_need(ctx, false, v129, v28);
                            let v188 = constructor_convert_valueregs_reg(ctx, v187);
                            let v181 = C::put_in_regs(ctx, v31.1);
                            let v194 = C::value_regs_get(ctx, v181, 0x0);
                            let v531 = constructor_lower_rotr(ctx, v28, v188, v194);
                            let v532 = constructor_output_reg(ctx, v531);
                            // Rule at src/isa/riscv64/lower.isle line 533.
                            return Some(v532);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v443 = C::imm12_and(ctx, v45, 0x7);
                                                let v444 = constructor_rv_slliw(ctx, v34, v443);
                                                let v445 = constructor_output_reg(ctx, v444);
                                                // Rule at src/isa/riscv64/lower.isle line 445.
                                                return Some(v445);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v437 = C::value_regs_get(ctx, v166, 0x0);
                                let v439 = C::imm12_const(ctx, 0x7);
                                let v440 = constructor_rv_andi(ctx, v437, v439);
                                let v441 = constructor_rv_sllw(ctx, v34, v440);
                                let v442 = constructor_output_reg(ctx, v441);
                                // Rule at src/isa/riscv64/lower.isle line 442.
                                return Some(v442);
                            }
                            I16 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v451 = C::imm12_and(ctx, v45, 0xF);
                                                let v452 = constructor_rv_slliw(ctx, v34, v451);
                                                let v453 = constructor_output_reg(ctx, v452);
                                                // Rule at src/isa/riscv64/lower.isle line 451.
                                                return Some(v453);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v437 = C::value_regs_get(ctx, v166, 0x0);
                                let v447 = C::imm12_const(ctx, 0xF);
                                let v448 = constructor_rv_andi(ctx, v437, v447);
                                let v449 = constructor_rv_sllw(ctx, v34, v448);
                                let v450 = constructor_output_reg(ctx, v449);
                                // Rule at src/isa/riscv64/lower.isle line 448.
                                return Some(v450);
                            }
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v456 = constructor_rv_slliw(ctx, v34, v45);
                                                let v457 = constructor_output_reg(ctx, v456);
                                                // Rule at src/isa/riscv64/lower.isle line 456.
                                                return Some(v457);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v437 = C::value_regs_get(ctx, v166, 0x0);
                                let v454 = constructor_rv_sllw(ctx, v34, v437);
                                let v455 = constructor_output_reg(ctx, v454);
                                // Rule at src/isa/riscv64/lower.isle line 454.
                                return Some(v455);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v50 = C::def_inst(ctx, v31.0);
                                if let Some(v51) = v50 {
                                    let v52 = &C::inst_data(ctx, v51);
                                    if let &InstructionData::Unary {
                                        opcode: ref v67,
                                        arg: v68,
                                    } = v52
                                    {
                                        if let &Opcode::Uextend = v67 {
                                            let v63 = C::has_zba(ctx);
                                            if v63 == true {
                                                let v69 = C::value_type(ctx, v68);
                                                if v69 == I32 {
                                                    let v462 = C::maybe_uextend(ctx, v31.1);
                                                    if let Some(v463) = v462 {
                                                        let v464 = C::def_inst(ctx, v463);
                                                        if let Some(v465) = v464 {
                                                            let v466 = &C::inst_data(ctx, v465);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v467,
                                                                imm: v468,
                                                            } = v466
                                                            {
                                                                if let &Opcode::Iconst = v467 {
                                                                    let v469 = C::u64_from_imm64(
                                                                        ctx, v468,
                                                                    );
                                                                    let v470 = C::imm12_from_u64(
                                                                        ctx, v469,
                                                                    );
                                                                    if let Some(v471) = v470 {
                                                                        let v70 =
                                                                            C::put_in_reg(ctx, v68);
                                                                        let v472 =
                                                                            constructor_rv_slliuw(
                                                                                ctx, v70, v471,
                                                                            );
                                                                        let v473 =
                                                                            constructor_output_reg(
                                                                                ctx, v472,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 465.
                                                                        return Some(v473);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v458 = constructor_rv_slli(ctx, v34, v45);
                                                let v459 = constructor_output_reg(ctx, v458);
                                                // Rule at src/isa/riscv64/lower.isle line 459.
                                                return Some(v459);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v437 = C::value_regs_get(ctx, v166, 0x0);
                                let v460 = constructor_rv_sll(ctx, v34, v437);
                                let v461 = constructor_output_reg(ctx, v460);
                                // Rule at src/isa/riscv64/lower.isle line 461.
                                return Some(v461);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v129 = C::put_in_regs(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v474 = constructor_lower_i128_ishl(ctx, v129, v166);
                                let v475 = C::output(ctx, v474);
                                // Rule at src/isa/riscv64/lower.isle line 470.
                                return Some(v475);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v129 = C::put_in_regs(ctx, v31.0);
                                                let v477 = constructor_ext_int_if_need(
                                                    ctx, false, v129, I8,
                                                );
                                                let v478 =
                                                    constructor_convert_valueregs_reg(ctx, v477);
                                                let v482 = C::imm12_and(ctx, v45, 0x7);
                                                let v483 = constructor_rv_srliw(ctx, v478, v482);
                                                let v484 = constructor_output_reg(ctx, v483);
                                                // Rule at src/isa/riscv64/lower.isle line 477.
                                                return Some(v484);
                                            }
                                        }
                                    }
                                }
                                let v129 = C::put_in_regs(ctx, v31.0);
                                let v477 = constructor_ext_int_if_need(ctx, false, v129, I8);
                                let v478 = constructor_convert_valueregs_reg(ctx, v477);
                                let v181 = C::put_in_regs(ctx, v31.1);
                                let v194 = C::value_regs_get(ctx, v181, 0x0);
                                let v439 = C::imm12_const(ctx, 0x7);
                                let v479 = constructor_rv_andi(ctx, v194, v439);
                                let v480 = constructor_rv_srlw(ctx, v478, v479);
                                let v481 = constructor_output_reg(ctx, v480);
                                // Rule at src/isa/riscv64/lower.isle line 474.
                                return Some(v481);
                            }
                            I16 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v129 = C::put_in_regs(ctx, v31.0);
                                                let v486 = constructor_ext_int_if_need(
                                                    ctx, false, v129, I16,
                                                );
                                                let v487 =
                                                    constructor_convert_valueregs_reg(ctx, v486);
                                                let v491 = C::imm12_and(ctx, v45, 0xF);
                                                let v492 = constructor_rv_srliw(ctx, v487, v491);
                                                let v493 = constructor_output_reg(ctx, v492);
                                                // Rule at src/isa/riscv64/lower.isle line 483.
                                                return Some(v493);
                                            }
                                        }
                                    }
                                }
                                let v129 = C::put_in_regs(ctx, v31.0);
                                let v486 = constructor_ext_int_if_need(ctx, false, v129, I16);
                                let v487 = constructor_convert_valueregs_reg(ctx, v486);
                                let v181 = C::put_in_regs(ctx, v31.1);
                                let v194 = C::value_regs_get(ctx, v181, 0x0);
                                let v447 = C::imm12_const(ctx, 0xF);
                                let v488 = constructor_rv_andi(ctx, v194, v447);
                                let v489 = constructor_rv_srlw(ctx, v487, v488);
                                let v490 = constructor_output_reg(ctx, v489);
                                // Rule at src/isa/riscv64/lower.isle line 480.
                                return Some(v490);
                            }
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v496 = constructor_rv_srliw(ctx, v34, v45);
                                                let v497 = constructor_output_reg(ctx, v496);
                                                // Rule at src/isa/riscv64/lower.isle line 488.
                                                return Some(v497);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v437 = C::value_regs_get(ctx, v166, 0x0);
                                let v494 = constructor_rv_srlw(ctx, v34, v437);
                                let v495 = constructor_output_reg(ctx, v494);
                                // Rule at src/isa/riscv64/lower.isle line 486.
                                return Some(v495);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v498 = constructor_rv_srli(ctx, v34, v45);
                                                let v499 = constructor_output_reg(ctx, v498);
                                                // Rule at src/isa/riscv64/lower.isle line 491.
                                                return Some(v499);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v437 = C::value_regs_get(ctx, v166, 0x0);
                                let v500 = constructor_rv_srl(ctx, v34, v437);
                                let v501 = constructor_output_reg(ctx, v500);
                                // Rule at src/isa/riscv64/lower.isle line 493.
                                return Some(v501);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v129 = C::put_in_regs(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v502 = constructor_lower_i128_ushr(ctx, v129, v166);
                                let v503 = C::output(ctx, v502);
                                // Rule at src/isa/riscv64/lower.isle line 496.
                                return Some(v503);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v129 = C::put_in_regs(ctx, v31.0);
                                                let v504 = constructor_ext_int_if_need(
                                                    ctx, true, v129, I8,
                                                );
                                                let v505 =
                                                    constructor_convert_valueregs_reg(ctx, v504);
                                                let v482 = C::imm12_and(ctx, v45, 0x7);
                                                let v508 = constructor_rv_srai(ctx, v505, v482);
                                                let v509 = constructor_output_reg(ctx, v508);
                                                // Rule at src/isa/riscv64/lower.isle line 504.
                                                return Some(v509);
                                            }
                                        }
                                    }
                                }
                                let v129 = C::put_in_regs(ctx, v31.0);
                                let v504 = constructor_ext_int_if_need(ctx, true, v129, I8);
                                let v505 = constructor_convert_valueregs_reg(ctx, v504);
                                let v181 = C::put_in_regs(ctx, v31.1);
                                let v194 = C::value_regs_get(ctx, v181, 0x0);
                                let v439 = C::imm12_const(ctx, 0x7);
                                let v479 = constructor_rv_andi(ctx, v194, v439);
                                let v506 = constructor_rv_sra(ctx, v505, v479);
                                let v507 = constructor_output_reg(ctx, v506);
                                // Rule at src/isa/riscv64/lower.isle line 501.
                                return Some(v507);
                            }
                            I16 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v129 = C::put_in_regs(ctx, v31.0);
                                                let v510 = constructor_ext_int_if_need(
                                                    ctx, true, v129, I16,
                                                );
                                                let v511 =
                                                    constructor_convert_valueregs_reg(ctx, v510);
                                                let v491 = C::imm12_and(ctx, v45, 0xF);
                                                let v514 = constructor_rv_srai(ctx, v511, v491);
                                                let v515 = constructor_output_reg(ctx, v514);
                                                // Rule at src/isa/riscv64/lower.isle line 510.
                                                return Some(v515);
                                            }
                                        }
                                    }
                                }
                                let v129 = C::put_in_regs(ctx, v31.0);
                                let v510 = constructor_ext_int_if_need(ctx, true, v129, I16);
                                let v511 = constructor_convert_valueregs_reg(ctx, v510);
                                let v181 = C::put_in_regs(ctx, v31.1);
                                let v194 = C::value_regs_get(ctx, v181, 0x0);
                                let v447 = C::imm12_const(ctx, 0xF);
                                let v488 = constructor_rv_andi(ctx, v194, v447);
                                let v512 = constructor_rv_sra(ctx, v511, v488);
                                let v513 = constructor_output_reg(ctx, v512);
                                // Rule at src/isa/riscv64/lower.isle line 507.
                                return Some(v513);
                            }
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v518 = constructor_rv_sraiw(ctx, v34, v45);
                                                let v519 = constructor_output_reg(ctx, v518);
                                                // Rule at src/isa/riscv64/lower.isle line 515.
                                                return Some(v519);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v437 = C::value_regs_get(ctx, v166, 0x0);
                                let v516 = constructor_rv_sraw(ctx, v34, v437);
                                let v517 = constructor_output_reg(ctx, v516);
                                // Rule at src/isa/riscv64/lower.isle line 513.
                                return Some(v517);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v522 = constructor_rv_srai(ctx, v34, v45);
                                                let v523 = constructor_output_reg(ctx, v522);
                                                // Rule at src/isa/riscv64/lower.isle line 519.
                                                return Some(v523);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v437 = C::value_regs_get(ctx, v166, 0x0);
                                let v520 = constructor_rv_sra(ctx, v34, v437);
                                let v521 = constructor_output_reg(ctx, v520);
                                // Rule at src/isa/riscv64/lower.isle line 517.
                                return Some(v521);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v129 = C::put_in_regs(ctx, v31.0);
                                let v166 = C::put_in_regs(ctx, v31.1);
                                let v437 = C::value_regs_get(ctx, v166, 0x0);
                                let v524 = C::value_reg(ctx, v437);
                                let v525 = constructor_lower_i128_sshr(ctx, v129, v524);
                                let v526 = C::output(ctx, v525);
                                // Rule at src/isa/riscv64/lower.isle line 521.
                                return Some(v526);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v643 = constructor_rv_fadd(ctx, v3, v34, v35);
                        let v644 = constructor_output_reg(ctx, v643);
                        // Rule at src/isa/riscv64/lower.isle line 667.
                        return Some(v644);
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v645 = constructor_rv_fsub(ctx, v3, v34, v35);
                        let v646 = constructor_output_reg(ctx, v645);
                        // Rule at src/isa/riscv64/lower.isle line 670.
                        return Some(v646);
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v647 = constructor_rv_fmul(ctx, v3, v34, v35);
                        let v648 = constructor_output_reg(ctx, v647);
                        // Rule at src/isa/riscv64/lower.isle line 673.
                        return Some(v648);
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v649 = constructor_rv_fdiv(ctx, v3, v34, v35);
                        let v650 = constructor_output_reg(ctx, v649);
                        // Rule at src/isa/riscv64/lower.isle line 676.
                        return Some(v650);
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v539 = constructor_rv_fsgnj(ctx, v3, v34, v35);
                        let v540 = constructor_output_reg(ctx, v539);
                        // Rule at src/isa/riscv64/lower.isle line 549.
                        return Some(v540);
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v652 =
                            constructor_gen_float_select(ctx, &FloatSelectOP::Min, v34, v35, v3);
                        let v653 = constructor_output_reg(ctx, v652);
                        // Rule at src/isa/riscv64/lower.isle line 680.
                        return Some(v653);
                    }
                }
                &Opcode::FminPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v654 = constructor_gen_float_select_pseudo(
                            ctx,
                            &FloatSelectOP::Min,
                            v34,
                            v35,
                            v3,
                        );
                        let v655 = constructor_output_reg(ctx, v654);
                        // Rule at src/isa/riscv64/lower.isle line 684.
                        return Some(v655);
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v657 =
                            constructor_gen_float_select(ctx, &FloatSelectOP::Max, v34, v35, v3);
                        let v658 = constructor_output_reg(ctx, v657);
                        // Rule at src/isa/riscv64/lower.isle line 688.
                        return Some(v658);
                    }
                }
                &Opcode::FmaxPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v659 = constructor_gen_float_select_pseudo(
                            ctx,
                            &FloatSelectOP::Max,
                            v34,
                            v35,
                            v3,
                        );
                        let v660 = constructor_output_reg(ctx, v659);
                        // Rule at src/isa/riscv64/lower.isle line 692.
                        return Some(v660);
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v713 = C::gen_move2(ctx, v34, I64, I64);
                            let v714 = C::put_in_reg(ctx, v31.1);
                            let v715 = C::gen_move2(ctx, v714, I64, I64);
                            let v716 = C::value_regs(ctx, v713, v715);
                            let v717 = C::output(ctx, v716);
                            // Rule at src/isa/riscv64/lower.isle line 739.
                            return Some(v717);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Call {
            opcode: ref v909,
            args: v910,
            func_ref: v911,
        } => {
            if let &Opcode::Call = v909 {
                let v913 = C::func_ref_data(ctx, v911);
                let v912 = C::value_list_slice(ctx, v910);
                let v917 = C::gen_call(ctx, v913.0, v913.1, v913.2, v912);
                // Rule at src/isa/riscv64/lower.isle line 970.
                return Some(v917);
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v918,
            args: v919,
            sig_ref: v920,
        } => {
            if let &Opcode::CallIndirect = v918 {
                let v921 = C::value_list_slice(ctx, v919);
                let v922 = C::value_slice_unwrap(ctx, v921);
                if let Some(v923) = v922 {
                    let v926 = C::gen_call_indirect(ctx, v920, v923.0, v923.1);
                    // Rule at src/isa/riscv64/lower.isle line 973.
                    return Some(v926);
                }
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v813,
            args: ref v814,
            cond: ref v815,
        } => {
            if let &Opcode::Fcmp = v813 {
                let v816 = C::unpack_value_array_2(ctx, v814);
                let v820 = C::put_in_reg(ctx, v816.0);
                let v821 = C::put_in_reg(ctx, v816.1);
                let v819 = C::value_type(ctx, v816.0);
                let v822 = &constructor_emit_fcmp(ctx, v815, v819, v820, v821);
                let v823 = constructor_cmp_value(ctx, v822);
                let v824 = constructor_output_reg(ctx, v823);
                // Rule at src/isa/riscv64/lower.isle line 860.
                return Some(v824);
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v825,
            func_ref: v826,
        } => {
            if let &Opcode::FuncAddr = v825 {
                let v827 = C::func_ref_data(ctx, v826);
                let v832 = C::load_ext_name(ctx, v827.1, 0x0);
                let v833 = constructor_output_reg(ctx, v832);
                // Rule at src/isa/riscv64/lower.isle line 865.
                return Some(v833);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v147,
            args: ref v148,
            code: ref v149,
        } => {
            if let &Opcode::UaddOverflowTrap = v147 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v27 = C::fits_in_64(ctx, v3);
                    if let Some(v28) = v27 {
                        let v150 = C::unpack_value_array_2(ctx, v148);
                        let v153 = C::put_in_reg(ctx, v150.0);
                        let v154 = C::put_in_reg(ctx, v150.1);
                        let v155 = constructor_lower_uadd_overflow(ctx, v153, v154, v28);
                        let v156 = C::value_regs_get(ctx, v155, 0x1);
                        let v157 = constructor_gen_trapif(ctx, v156, v149);
                        let v158 = C::value_regs_get(ctx, v155, 0x0);
                        let v159 = constructor_output_reg(ctx, v158);
                        // Rule at src/isa/riscv64/lower.isle line 102.
                        return Some(v159);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v802,
            args: ref v803,
            cond: ref v804,
        } => {
            if let &Opcode::Icmp = v802 {
                let v805 = C::unpack_value_array_2(ctx, v803);
                let v809 = C::put_in_regs(ctx, v805.0);
                let v810 = C::put_in_regs(ctx, v805.1);
                let v808 = C::value_type(ctx, v805.0);
                let v811 = constructor_lower_icmp(ctx, v804, v809, v810, v808);
                let v812 = constructor_output_reg(ctx, v811);
                // Rule at src/isa/riscv64/lower.isle line 855.
                return Some(v812);
            }
        }
        &InstructionData::Load {
            opcode: ref v744,
            arg: v745,
            flags: v746,
            offset: v747,
        } => {
            match v744 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v748 = C::value_type(ctx, v745);
                        let v749 = C::ty_addr64(ctx, v748);
                        if let Some(v750) = v749 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I128 {
                                let v751 = C::put_in_reg(ctx, v745);
                                let v776 = constructor_gen_load_128(ctx, v751, v747, v746);
                                let v777 = C::output(ctx, v776);
                                // Rule at src/isa/riscv64/lower.isle line 817.
                                return Some(v777);
                            }
                            let v751 = C::put_in_reg(ctx, v745);
                            let v773 = &C::load_op(ctx, v3);
                            let v774 = constructor_gen_load(ctx, v751, v747, v773, v746, v3);
                            let v775 = constructor_output_reg(ctx, v774);
                            // Rule at src/isa/riscv64/lower.isle line 813.
                            return Some(v775);
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v748 = C::value_type(ctx, v745);
                    let v749 = C::ty_addr64(ctx, v748);
                    if let Some(v750) = v749 {
                        let v751 = C::put_in_reg(ctx, v745);
                        let v753 = &constructor_int_load_op(ctx, false, 0x8);
                        let v754 = constructor_gen_load(ctx, v751, v747, v753, v746, I64);
                        let v755 = constructor_output_reg(ctx, v754);
                        // Rule at src/isa/riscv64/lower.isle line 786.
                        return Some(v755);
                    }
                }
                &Opcode::Sload8 => {
                    let v748 = C::value_type(ctx, v745);
                    let v749 = C::ty_addr64(ctx, v748);
                    if let Some(v750) = v749 {
                        let v751 = C::put_in_reg(ctx, v745);
                        let v756 = &constructor_int_load_op(ctx, true, 0x8);
                        let v757 = constructor_gen_load(ctx, v751, v747, v756, v746, I64);
                        let v758 = constructor_output_reg(ctx, v757);
                        // Rule at src/isa/riscv64/lower.isle line 790.
                        return Some(v758);
                    }
                }
                &Opcode::Uload16 => {
                    let v748 = C::value_type(ctx, v745);
                    let v749 = C::ty_addr64(ctx, v748);
                    if let Some(v750) = v749 {
                        let v751 = C::put_in_reg(ctx, v745);
                        let v760 = &constructor_int_load_op(ctx, false, 0x10);
                        let v761 = constructor_gen_load(ctx, v751, v747, v760, v746, I64);
                        let v762 = constructor_output_reg(ctx, v761);
                        // Rule at src/isa/riscv64/lower.isle line 794.
                        return Some(v762);
                    }
                }
                &Opcode::Sload16 => {
                    let v748 = C::value_type(ctx, v745);
                    let v749 = C::ty_addr64(ctx, v748);
                    if let Some(v750) = v749 {
                        let v751 = C::put_in_reg(ctx, v745);
                        let v763 = &constructor_int_load_op(ctx, true, 0x10);
                        let v764 = constructor_gen_load(ctx, v751, v747, v763, v746, I64);
                        let v765 = constructor_output_reg(ctx, v764);
                        // Rule at src/isa/riscv64/lower.isle line 799.
                        return Some(v765);
                    }
                }
                &Opcode::Uload32 => {
                    let v748 = C::value_type(ctx, v745);
                    let v749 = C::ty_addr64(ctx, v748);
                    if let Some(v750) = v749 {
                        let v751 = C::put_in_reg(ctx, v745);
                        let v767 = &constructor_int_load_op(ctx, false, 0x20);
                        let v768 = constructor_gen_load(ctx, v751, v747, v767, v746, I64);
                        let v769 = constructor_output_reg(ctx, v768);
                        // Rule at src/isa/riscv64/lower.isle line 804.
                        return Some(v769);
                    }
                }
                &Opcode::Sload32 => {
                    let v748 = C::value_type(ctx, v745);
                    let v749 = C::ty_addr64(ctx, v748);
                    if let Some(v750) = v749 {
                        let v751 = C::put_in_reg(ctx, v745);
                        let v770 = &constructor_int_load_op(ctx, true, 0x20);
                        let v771 = constructor_gen_load(ctx, v751, v747, v770, v746, I64);
                        let v772 = constructor_output_reg(ctx, v771);
                        // Rule at src/isa/riscv64/lower.isle line 809.
                        return Some(v772);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v599,
            arg: v600,
            flags: v601,
        } => {
            match v599 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v864 = C::put_in_regs(ctx, v600);
                        let v863 = C::value_type(ctx, v600);
                        let v3 = C::value_type(ctx, v2);
                        let v865 = C::gen_moves(ctx, v864, v863, v3);
                        let v866 = C::output(ctx, v865);
                        // Rule at src/isa/riscv64/lower.isle line 905.
                        return Some(v866);
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v554 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v555) = v554 {
                            let v602 = C::put_in_reg(ctx, v600);
                            let v603 = constructor_gen_atomic_load(ctx, v602, v555);
                            let v604 = constructor_output_reg(ctx, v603);
                            // Rule at src/isa/riscv64/lower.isle line 619.
                            return Some(v604);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v893,
            args: v894,
        } => {
            if let &Opcode::Return = v893 {
                let v895 = C::value_list_slice(ctx, v894);
                let v896 = C::value_slice_len(ctx, v895);
                let v897 = C::range(ctx, 0x0, v896);
                let v898 = constructor_lower_return(ctx, v897, v895);
                // Rule at src/isa/riscv64/lower.isle line 948.
                return Some(v898);
            }
        }
        &InstructionData::NullAry { opcode: ref v23 } => {
            match v23 {
                &Opcode::Debugtrap => {
                    let v735 = SideEffectNoResult::Inst {
                        inst: MInst::EBreak,
                    };
                    let v736 = constructor_side_effect(ctx, &v735);
                    // Rule at src/isa/riscv64/lower.isle line 766.
                    return Some(v736);
                }
                &Opcode::GetFramePointer => {
                    let v899 = C::fp_reg(ctx);
                    let v900 = constructor_gen_mov_from_preg(ctx, v899);
                    let v901 = constructor_output_reg(ctx, v900);
                    // Rule at src/isa/riscv64/lower.isle line 954.
                    return Some(v901);
                }
                &Opcode::GetStackPointer => {
                    let v902 = C::sp_reg(ctx);
                    let v903 = constructor_gen_mov_from_preg(ctx, v902);
                    let v904 = constructor_output_reg(ctx, v903);
                    // Rule at src/isa/riscv64/lower.isle line 957.
                    return Some(v904);
                }
                &Opcode::GetReturnAddress => {
                    let v905 = C::load_ra(ctx);
                    let v906 = constructor_output_reg(ctx, v905);
                    // Rule at src/isa/riscv64/lower.isle line 960.
                    return Some(v906);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v25 = C::imm(ctx, v3, 0x0);
                        let v26 = constructor_output_reg(ctx, v25);
                        // Rule at src/isa/riscv64/lower.isle line 24.
                        return Some(v26);
                    }
                }
                &Opcode::Fence => {
                    let v738 = MInst::Fence {
                        pred: 0xF,
                        succ: 0xF,
                    };
                    let v739 = SideEffectNoResult::Inst { inst: v738 };
                    let v740 = constructor_side_effect(ctx, &v739);
                    // Rule at src/isa/riscv64/lower.isle line 771.
                    return Some(v740);
                }
                _ => {}
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v661,
            stack_slot: v662,
            offset: v663,
        } => {
            if let &Opcode::StackAddr = v661 {
                let v664 = C::gen_stack_addr(ctx, v662, v663);
                let v665 = constructor_output_reg(ctx, v664);
                // Rule at src/isa/riscv64/lower.isle line 697.
                return Some(v665);
            }
        }
        &InstructionData::Store {
            opcode: ref v778,
            args: ref v779,
            flags: v780,
            offset: v781,
        } => {
            match v778 {
                &Opcode::Store => {
                    let v782 = C::unpack_value_array_2(ctx, v779);
                    let v785 = C::value_type(ctx, v782.1);
                    let v786 = C::ty_addr64(ctx, v785);
                    if let Some(v787) = v786 {
                        let v796 = C::value_type(ctx, v782.0);
                        if v796 == I128 {
                            let v788 = C::put_in_reg(ctx, v782.1);
                            let v800 = C::put_in_regs(ctx, v782.0);
                            let v801 = constructor_gen_store_128(ctx, v788, v781, v780, v800);
                            // Rule at src/isa/riscv64/lower.isle line 841.
                            return Some(v801);
                        }
                        let v788 = C::put_in_reg(ctx, v782.1);
                        let v797 = &C::store_op(ctx, v796);
                        let v798 = C::put_in_reg(ctx, v782.0);
                        let v799 = constructor_gen_store(ctx, v788, v781, v797, v780, v798);
                        // Rule at src/isa/riscv64/lower.isle line 837.
                        return Some(v799);
                    }
                }
                &Opcode::Istore8 => {
                    let v782 = C::unpack_value_array_2(ctx, v779);
                    let v785 = C::value_type(ctx, v782.1);
                    let v786 = C::ty_addr64(ctx, v785);
                    if let Some(v787) = v786 {
                        let v788 = C::put_in_reg(ctx, v782.1);
                        let v790 = C::put_in_reg(ctx, v782.0);
                        let v791 = constructor_gen_store(ctx, v788, v781, &StoreOP::Sb, v780, v790);
                        // Rule at src/isa/riscv64/lower.isle line 823.
                        return Some(v791);
                    }
                }
                &Opcode::Istore16 => {
                    let v782 = C::unpack_value_array_2(ctx, v779);
                    let v785 = C::value_type(ctx, v782.1);
                    let v786 = C::ty_addr64(ctx, v785);
                    if let Some(v787) = v786 {
                        let v788 = C::put_in_reg(ctx, v782.1);
                        let v790 = C::put_in_reg(ctx, v782.0);
                        let v793 = constructor_gen_store(ctx, v788, v781, &StoreOP::Sh, v780, v790);
                        // Rule at src/isa/riscv64/lower.isle line 827.
                        return Some(v793);
                    }
                }
                &Opcode::Istore32 => {
                    let v782 = C::unpack_value_array_2(ctx, v779);
                    let v785 = C::value_type(ctx, v782.1);
                    let v786 = C::ty_addr64(ctx, v785);
                    if let Some(v787) = v786 {
                        let v788 = C::put_in_reg(ctx, v782.1);
                        let v790 = C::put_in_reg(ctx, v782.0);
                        let v795 = constructor_gen_store(ctx, v788, v781, &StoreOP::Sw, v780, v790);
                        // Rule at src/isa/riscv64/lower.isle line 832.
                        return Some(v795);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v605,
            args: ref v606,
            flags: v607,
        } => {
            if let &Opcode::AtomicStore = v605 {
                let v608 = C::unpack_value_array_2(ctx, v606);
                let v611 = C::value_type(ctx, v608.0);
                let v612 = C::valid_atomic_transaction(ctx, v611);
                if let Some(v613) = v612 {
                    let v614 = C::put_in_reg(ctx, v608.1);
                    let v615 = C::put_in_reg(ctx, v608.0);
                    let v616 = constructor_gen_atomic_store(ctx, v614, v613, v615);
                    // Rule at src/isa/riscv64/lower.isle line 625.
                    return Some(v616);
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v541,
            args: ref v542,
        } => {
            match v541 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v543 = C::unpack_value_array_3(ctx, v542);
                            let v682 = C::def_inst(ctx, v543.0);
                            if let Some(v683) = v682 {
                                let v684 = &C::inst_data(ctx, v683);
                                if let &InstructionData::IntCompare {
                                    opcode: ref v685,
                                    args: ref v686,
                                    cond: ref v687,
                                } = v684
                                {
                                    if let &Opcode::Icmp = v685 {
                                        let v688 = C::unpack_value_array_2(ctx, v686);
                                        let v692 = C::put_in_regs(ctx, v688.0);
                                        let v693 = &C::intcc_to_extend_op(ctx, v687);
                                        let v691 = C::value_type(ctx, v688.1);
                                        let v694 =
                                            constructor_normalize_cmp_value(ctx, v691, v692, v693);
                                        let v695 = constructor_convert_valueregs_reg(ctx, v694);
                                        let v696 = C::put_in_regs(ctx, v688.1);
                                        let v697 = &C::intcc_to_extend_op(ctx, v687);
                                        let v698 =
                                            constructor_normalize_cmp_value(ctx, v691, v696, v697);
                                        let v699 = constructor_convert_valueregs_reg(ctx, v698);
                                        let v700 = C::put_in_reg(ctx, v543.1);
                                        let v701 = C::put_in_reg(ctx, v543.2);
                                        let v702 =
                                            C::gen_select_reg(ctx, v687, v695, v699, v700, v701);
                                        let v703 = constructor_output_reg(ctx, v702);
                                        // Rule at src/isa/riscv64/lower.isle line 717.
                                        return Some(v703);
                                    }
                                }
                            }
                        }
                        let v543 = C::unpack_value_array_3(ctx, v542);
                        let v674 = C::put_in_regs(ctx, v543.0);
                        let v673 = C::value_type(ctx, v543.0);
                        let v676 =
                            constructor_normalize_cmp_value(ctx, v673, v674, &ExtendOp::Zero);
                        let v677 = constructor_truthy_to_reg(ctx, v673, v676);
                        let v678 = C::put_in_regs(ctx, v543.1);
                        let v679 = C::put_in_regs(ctx, v543.2);
                        let v680 = constructor_gen_select(ctx, v3, v677, v678, v679);
                        let v681 = C::output(ctx, v680);
                        // Rule at src/isa/riscv64/lower.isle line 714.
                        return Some(v681);
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v543 = C::unpack_value_array_3(ctx, v542);
                        let v682 = C::def_inst(ctx, v543.0);
                        if let Some(v683) = v682 {
                            let v684 = &C::inst_data(ctx, v683);
                            if let &InstructionData::IntCompare {
                                opcode: ref v685,
                                args: ref v686,
                                cond: ref v687,
                            } = v684
                            {
                                if let &Opcode::Icmp = v685 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v880 = &C::alloc_vec_writable(ctx, v3);
                                    let v688 = C::unpack_value_array_2(ctx, v686);
                                    let v881 = C::put_in_regs(ctx, v688.0);
                                    let v882 = C::put_in_regs(ctx, v688.1);
                                    let v879 = C::value_type(ctx, v688.0);
                                    let v883 = constructor_lower_icmp(ctx, v687, v881, v882, v879);
                                    let v884 = &C::vec_writable_clone(ctx, v880);
                                    let v885 = C::put_in_regs(ctx, v543.1);
                                    let v886 = C::put_in_regs(ctx, v543.2);
                                    let v887 = MInst::SelectIf {
                                        if_spectre_guard: true,
                                        rd: v884.clone(),
                                        test: v883,
                                        x: v885,
                                        y: v886,
                                    };
                                    let v888 = C::emit(ctx, &v887);
                                    let v889 = C::vec_writable_to_regs(ctx, v880);
                                    let v890 = C::output(ctx, v889);
                                    // Rule at src/isa/riscv64/lower.isle line 931.
                                    return Some(v890);
                                }
                            }
                        }
                        let v674 = C::put_in_regs(ctx, v543.0);
                        let v673 = C::value_type(ctx, v543.0);
                        let v676 =
                            constructor_normalize_cmp_value(ctx, v673, v674, &ExtendOp::Zero);
                        let v677 = constructor_truthy_to_reg(ctx, v673, v676);
                        let v678 = C::put_in_regs(ctx, v543.1);
                        let v679 = C::put_in_regs(ctx, v543.2);
                        let v3 = C::value_type(ctx, v2);
                        let v680 = constructor_gen_select(ctx, v3, v677, v678, v679);
                        let v681 = C::output(ctx, v680);
                        // Rule at src/isa/riscv64/lower.isle line 938.
                        return Some(v681);
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v543 = C::unpack_value_array_3(ctx, v542);
                        let v547 = C::put_in_reg(ctx, v543.0);
                        let v548 = C::put_in_reg(ctx, v543.1);
                        let v549 = C::put_in_reg(ctx, v543.2);
                        let v3 = C::value_type(ctx, v2);
                        let v704 = constructor_gen_bitselect(ctx, v3, v547, v548, v549);
                        let v705 = constructor_output_reg(ctx, v704);
                        // Rule at src/isa/riscv64/lower.isle line 726.
                        return Some(v705);
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v543 = C::unpack_value_array_3(ctx, v542);
                        let v547 = C::put_in_reg(ctx, v543.0);
                        let v548 = C::put_in_reg(ctx, v543.1);
                        let v549 = C::put_in_reg(ctx, v543.2);
                        let v3 = C::value_type(ctx, v2);
                        let v550 = constructor_rv_fmadd(ctx, v3, v547, v548, v549);
                        let v551 = constructor_output_reg(ctx, v550);
                        // Rule at src/isa/riscv64/lower.isle line 553.
                        return Some(v551);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Trap {
            opcode: ref v741,
            code: ref v742,
        } => {
            match v741 {
                &Opcode::Trap => {
                    let v743 = constructor_udf(ctx, v742);
                    // Rule at src/isa/riscv64/lower.isle line 776.
                    return Some(v743);
                }
                &Opcode::ResumableTrap => {
                    let v743 = constructor_udf(ctx, v742);
                    // Rule at src/isa/riscv64/lower.isle line 781.
                    return Some(v743);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v169,
            arg: v170,
        } => {
            match v169 {
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v171 = C::put_in_regs(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v172 = constructor_neg(ctx, v3, v171);
                        let v173 = C::output(ctx, v172);
                        // Rule at src/isa/riscv64/lower.isle line 123.
                        return Some(v173);
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v345 = C::put_in_reg(ctx, v170);
                            let v907 = constructor_lower_iabs(ctx, v28, v345);
                            let v908 = constructor_output_reg(ctx, v907);
                            // Rule at src/isa/riscv64/lower.isle line 965.
                            return Some(v908);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v171 = C::put_in_regs(ctx, v170);
                                let v350 = constructor_bnot_128(ctx, v171);
                                let v351 = C::output(ctx, v350);
                                // Rule at src/isa/riscv64/lower.isle line 351.
                                return Some(v351);
                            }
                            F32 => {
                                let v345 = C::put_in_reg(ctx, v170);
                                let v352 = constructor_lower_float_bnot(ctx, v345, F32);
                                let v353 = constructor_output_reg(ctx, v352);
                                // Rule at src/isa/riscv64/lower.isle line 355.
                                return Some(v353);
                            }
                            F64 => {
                                let v345 = C::put_in_reg(ctx, v170);
                                let v354 = constructor_lower_float_bnot(ctx, v345, F64);
                                let v355 = constructor_output_reg(ctx, v354);
                                // Rule at src/isa/riscv64/lower.isle line 359.
                                return Some(v355);
                            }
                            _ => {}
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v265 = C::ty_int(ctx, v28);
                            if let Some(v266) = v265 {
                                let v345 = C::put_in_reg(ctx, v170);
                                let v347 = C::imm_from_neg_bits(ctx, -0x1);
                                let v348 = constructor_rv_xori(ctx, v345, v347);
                                let v349 = constructor_output_reg(ctx, v348);
                                // Rule at src/isa/riscv64/lower.isle line 348.
                                return Some(v349);
                            }
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v171 = C::put_in_regs(ctx, v170);
                            let v358 = C::value_regs_get(ctx, v171, 0x0);
                            let v359 = constructor_lower_bit_reverse(ctx, v358, I64);
                            let v360 = C::value_regs_get(ctx, v171, 0x1);
                            let v361 = constructor_lower_bit_reverse(ctx, v360, I64);
                            let v362 = C::value_regs(ctx, v361, v359);
                            let v363 = C::output(ctx, v362);
                            // Rule at src/isa/riscv64/lower.isle line 366.
                            return Some(v363);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v265 = C::ty_int(ctx, v28);
                            if let Some(v266) = v265 {
                                let v345 = C::put_in_reg(ctx, v170);
                                let v356 = constructor_lower_bit_reverse(ctx, v345, v266);
                                let v357 = constructor_output_reg(ctx, v356);
                                // Rule at src/isa/riscv64/lower.isle line 363.
                                return Some(v357);
                            }
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v171 = C::put_in_regs(ctx, v170);
                            let v370 = constructor_lower_clz_i128(ctx, v171);
                            let v371 = C::output(ctx, v370);
                            // Rule at src/isa/riscv64/lower.isle line 384.
                            return Some(v371);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v345 = C::put_in_reg(ctx, v170);
                            let v368 = constructor_lower_clz(ctx, v28, v345);
                            let v369 = constructor_output_reg(ctx, v368);
                            // Rule at src/isa/riscv64/lower.isle line 381.
                            return Some(v369);
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v171 = C::put_in_regs(ctx, v170);
                            let v374 = constructor_lower_cls_i128(ctx, v171);
                            let v375 = C::output(ctx, v374);
                            // Rule at src/isa/riscv64/lower.isle line 391.
                            return Some(v375);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v345 = C::put_in_reg(ctx, v170);
                            let v372 = constructor_lower_cls(ctx, v28, v345);
                            let v373 = constructor_output_reg(ctx, v372);
                            // Rule at src/isa/riscv64/lower.isle line 388.
                            return Some(v373);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v171 = C::put_in_regs(ctx, v170);
                            let v366 = constructor_lower_ctz_128(ctx, v171);
                            let v367 = C::output(ctx, v366);
                            // Rule at src/isa/riscv64/lower.isle line 377.
                            return Some(v367);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v345 = C::put_in_reg(ctx, v170);
                            let v364 = constructor_lower_ctz(ctx, v28, v345);
                            let v365 = constructor_output_reg(ctx, v364);
                            // Rule at src/isa/riscv64/lower.isle line 374.
                            return Some(v365);
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v171 = C::put_in_regs(ctx, v170);
                            let v435 = constructor_lower_popcnt_i128(ctx, v171);
                            let v436 = C::output(ctx, v435);
                            // Rule at src/isa/riscv64/lower.isle line 438.
                            return Some(v436);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v345 = C::put_in_reg(ctx, v170);
                            let v433 = constructor_lower_popcnt(ctx, v345, v28);
                            let v434 = constructor_output_reg(ctx, v433);
                            // Rule at src/isa/riscv64/lower.isle line 436.
                            return Some(v434);
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v345 = C::put_in_reg(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v552 = constructor_rv_fsqrt(ctx, v3, v345);
                        let v553 = constructor_output_reg(ctx, v552);
                        // Rule at src/isa/riscv64/lower.isle line 558.
                        return Some(v553);
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v345 = C::put_in_reg(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v537 = constructor_rv_fneg(ctx, v3, v345);
                        let v538 = constructor_output_reg(ctx, v537);
                        // Rule at src/isa/riscv64/lower.isle line 545.
                        return Some(v538);
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v345 = C::put_in_reg(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v535 = constructor_rv_fabs(ctx, v3, v345);
                        let v536 = constructor_output_reg(ctx, v535);
                        // Rule at src/isa/riscv64/lower.isle line 541.
                        return Some(v536);
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v345 = C::put_in_reg(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v868 = constructor_gen_float_round(ctx, &FloatRoundOP::Ceil, v345, v3);
                        let v869 = constructor_output_reg(ctx, v868);
                        // Rule at src/isa/riscv64/lower.isle line 910.
                        return Some(v869);
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v345 = C::put_in_reg(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v871 = constructor_gen_float_round(ctx, &FloatRoundOP::Floor, v345, v3);
                        let v872 = constructor_output_reg(ctx, v871);
                        // Rule at src/isa/riscv64/lower.isle line 916.
                        return Some(v872);
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v345 = C::put_in_reg(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v874 = constructor_gen_float_round(ctx, &FloatRoundOP::Trunc, v345, v3);
                        let v875 = constructor_output_reg(ctx, v874);
                        // Rule at src/isa/riscv64/lower.isle line 920.
                        return Some(v875);
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v345 = C::put_in_reg(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v877 =
                            constructor_gen_float_round(ctx, &FloatRoundOP::Nearest, v345, v3);
                        let v878 = constructor_output_reg(ctx, v877);
                        // Rule at src/isa/riscv64/lower.isle line 925.
                        return Some(v878);
                    }
                }
                &Opcode::IsNull => {
                    let v345 = C::put_in_reg(ctx, v170);
                    let v666 = constructor_rv_seqz(ctx, v345);
                    let v667 = constructor_output_reg(ctx, v666);
                    // Rule at src/isa/riscv64/lower.isle line 703.
                    return Some(v667);
                }
                &Opcode::IsInvalid => {
                    let v345 = C::put_in_reg(ctx, v170);
                    let v669 = C::imm12_const(ctx, 0x1);
                    let v670 = constructor_rv_addi(ctx, v345, v669);
                    let v671 = constructor_rv_seqz(ctx, v670);
                    let v672 = constructor_output_reg(ctx, v671);
                    // Rule at src/isa/riscv64/lower.isle line 709.
                    return Some(v672);
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v171 = C::put_in_regs(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v376 = C::value_type(ctx, v170);
                        let v891 = constructor_lower_bmask(ctx, v3, v376, v171);
                        let v892 = C::output(ctx, v891);
                        // Rule at src/isa/riscv64/lower.isle line 944.
                        return Some(v892);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v171 = C::put_in_regs(ctx, v170);
                        let v358 = C::value_regs_get(ctx, v171, 0x0);
                        let v3 = C::value_type(ctx, v2);
                        let v637 = C::gen_move2(ctx, v358, v3, v3);
                        let v638 = constructor_output_reg(ctx, v637);
                        // Rule at src/isa/riscv64/lower.isle line 654.
                        return Some(v638);
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v171 = C::put_in_regs(ctx, v170);
                        let v376 = C::value_type(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v377 = constructor_zext(ctx, v171, v376, v3);
                        let v378 = C::output(ctx, v377);
                        // Rule at src/isa/riscv64/lower.isle line 395.
                        return Some(v378);
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v381 = C::def_inst(ctx, v170);
                            if let Some(v382) = v381 {
                                let v383 = C::first_result(ctx, v382);
                                if let Some(v384) = v383 {
                                    let v385 = C::value_type(ctx, v384);
                                    if v385 == I32 {
                                        let v386 = &C::inst_data(ctx, v382);
                                        if let &InstructionData::Binary {
                                            opcode: ref v387,
                                            args: ref v388,
                                        } = v386
                                        {
                                            match v387 {
                                                &Opcode::Iadd => {
                                                    let v389 = C::unpack_value_array_2(ctx, v388);
                                                    let v416 = C::def_inst(ctx, v389.0);
                                                    if let Some(v417) = v416 {
                                                        let v418 = &C::inst_data(ctx, v417);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v419,
                                                            imm: v420,
                                                        } = v418
                                                        {
                                                            if let &Opcode::Iconst = v419 {
                                                                let v421 =
                                                                    C::u64_from_imm64(ctx, v420);
                                                                let v422 =
                                                                    C::imm12_from_u64(ctx, v421);
                                                                if let Some(v423) = v422 {
                                                                    let v424 =
                                                                        C::put_in_reg(ctx, v389.1);
                                                                    let v425 = constructor_rv_addiw(
                                                                        ctx, v424, v423,
                                                                    );
                                                                    let v426 =
                                                                        constructor_output_reg(
                                                                            ctx, v425,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 423.
                                                                    return Some(v426);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v406 = C::def_inst(ctx, v389.1);
                                                    if let Some(v407) = v406 {
                                                        let v408 = &C::inst_data(ctx, v407);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v409,
                                                            imm: v410,
                                                        } = v408
                                                        {
                                                            if let &Opcode::Iconst = v409 {
                                                                let v411 =
                                                                    C::u64_from_imm64(ctx, v410);
                                                                let v412 =
                                                                    C::imm12_from_u64(ctx, v411);
                                                                if let Some(v413) = v412 {
                                                                    let v392 =
                                                                        C::put_in_reg(ctx, v389.0);
                                                                    let v414 = constructor_rv_addiw(
                                                                        ctx, v392, v413,
                                                                    );
                                                                    let v415 =
                                                                        constructor_output_reg(
                                                                            ctx, v414,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 420.
                                                                    return Some(v415);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v392 = C::put_in_reg(ctx, v389.0);
                                                    let v393 = C::put_in_reg(ctx, v389.1);
                                                    let v394 = constructor_rv_addw(ctx, v392, v393);
                                                    let v395 = constructor_output_reg(ctx, v394);
                                                    // Rule at src/isa/riscv64/lower.isle line 404.
                                                    return Some(v395);
                                                }
                                                &Opcode::Isub => {
                                                    let v389 = C::unpack_value_array_2(ctx, v388);
                                                    let v392 = C::put_in_reg(ctx, v389.0);
                                                    let v393 = C::put_in_reg(ctx, v389.1);
                                                    let v396 = constructor_rv_subw(ctx, v392, v393);
                                                    let v397 = constructor_output_reg(ctx, v396);
                                                    // Rule at src/isa/riscv64/lower.isle line 407.
                                                    return Some(v397);
                                                }
                                                &Opcode::Ishl => {
                                                    let v389 = C::unpack_value_array_2(ctx, v388);
                                                    let v406 = C::def_inst(ctx, v389.1);
                                                    if let Some(v407) = v406 {
                                                        let v408 = &C::inst_data(ctx, v407);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v409,
                                                            imm: v410,
                                                        } = v408
                                                        {
                                                            if let &Opcode::Iconst = v409 {
                                                                let v411 =
                                                                    C::u64_from_imm64(ctx, v410);
                                                                let v412 =
                                                                    C::imm12_from_u64(ctx, v411);
                                                                if let Some(v413) = v412 {
                                                                    let v392 =
                                                                        C::put_in_reg(ctx, v389.0);
                                                                    let v427 = constructor_rv_slliw(
                                                                        ctx, v392, v413,
                                                                    );
                                                                    let v428 =
                                                                        constructor_output_reg(
                                                                            ctx, v427,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 426.
                                                                    return Some(v428);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v392 = C::put_in_reg(ctx, v389.0);
                                                    let v398 = C::put_in_regs(ctx, v389.1);
                                                    let v399 = C::value_regs_get(ctx, v398, 0x0);
                                                    let v400 = constructor_rv_sllw(ctx, v392, v399);
                                                    let v401 = constructor_output_reg(ctx, v400);
                                                    // Rule at src/isa/riscv64/lower.isle line 410.
                                                    return Some(v401);
                                                }
                                                &Opcode::Ushr => {
                                                    let v389 = C::unpack_value_array_2(ctx, v388);
                                                    let v406 = C::def_inst(ctx, v389.1);
                                                    if let Some(v407) = v406 {
                                                        let v408 = &C::inst_data(ctx, v407);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v409,
                                                            imm: v410,
                                                        } = v408
                                                        {
                                                            if let &Opcode::Iconst = v409 {
                                                                let v411 =
                                                                    C::u64_from_imm64(ctx, v410);
                                                                let v412 =
                                                                    C::imm12_from_u64(ctx, v411);
                                                                if let Some(v413) = v412 {
                                                                    let v392 =
                                                                        C::put_in_reg(ctx, v389.0);
                                                                    let v429 = constructor_rv_srliw(
                                                                        ctx, v392, v413,
                                                                    );
                                                                    let v430 =
                                                                        constructor_output_reg(
                                                                            ctx, v429,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 429.
                                                                    return Some(v430);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v392 = C::put_in_reg(ctx, v389.0);
                                                    let v398 = C::put_in_regs(ctx, v389.1);
                                                    let v399 = C::value_regs_get(ctx, v398, 0x0);
                                                    let v402 = constructor_rv_srlw(ctx, v392, v399);
                                                    let v403 = constructor_output_reg(ctx, v402);
                                                    // Rule at src/isa/riscv64/lower.isle line 413.
                                                    return Some(v403);
                                                }
                                                &Opcode::Sshr => {
                                                    let v389 = C::unpack_value_array_2(ctx, v388);
                                                    let v406 = C::def_inst(ctx, v389.1);
                                                    if let Some(v407) = v406 {
                                                        let v408 = &C::inst_data(ctx, v407);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v409,
                                                            imm: v410,
                                                        } = v408
                                                        {
                                                            if let &Opcode::Iconst = v409 {
                                                                let v411 =
                                                                    C::u64_from_imm64(ctx, v410);
                                                                let v412 =
                                                                    C::imm12_from_u64(ctx, v411);
                                                                if let Some(v413) = v412 {
                                                                    let v392 =
                                                                        C::put_in_reg(ctx, v389.0);
                                                                    let v431 = constructor_rv_sraiw(
                                                                        ctx, v392, v413,
                                                                    );
                                                                    let v432 =
                                                                        constructor_output_reg(
                                                                            ctx, v431,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 432.
                                                                    return Some(v432);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v392 = C::put_in_reg(ctx, v389.0);
                                                    let v398 = C::put_in_regs(ctx, v389.1);
                                                    let v399 = C::value_regs_get(ctx, v398, 0x0);
                                                    let v404 = constructor_rv_sraw(ctx, v392, v399);
                                                    let v405 = constructor_output_reg(ctx, v404);
                                                    // Rule at src/isa/riscv64/lower.isle line 416.
                                                    return Some(v405);
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v171 = C::put_in_regs(ctx, v170);
                        let v376 = C::value_type(ctx, v170);
                        let v379 = constructor_sext(ctx, v171, v376, v3);
                        let v380 = C::output(ctx, v379);
                        // Rule at src/isa/riscv64/lower.isle line 399.
                        return Some(v380);
                    }
                }
                &Opcode::Fpromote => {
                    let v345 = C::put_in_reg(ctx, v170);
                    let v639 = constructor_rv_fcvtds(ctx, v345);
                    let v640 = constructor_output_reg(ctx, v639);
                    // Rule at src/isa/riscv64/lower.isle line 658.
                    return Some(v640);
                }
                &Opcode::Fdemote => {
                    let v345 = C::put_in_reg(ctx, v170);
                    let v641 = constructor_rv_fcvtsd(ctx, v345);
                    let v642 = constructor_output_reg(ctx, v641);
                    // Rule at src/isa/riscv64/lower.isle line 662.
                    return Some(v642);
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v345 = C::put_in_reg(ctx, v170);
                        let v376 = C::value_type(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v834 = constructor_gen_fcvt_int(ctx, false, v345, false, v376, v3);
                        let v835 = constructor_output_reg(ctx, v834);
                        // Rule at src/isa/riscv64/lower.isle line 870.
                        return Some(v835);
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v345 = C::put_in_reg(ctx, v170);
                        let v376 = C::value_type(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v836 = constructor_gen_fcvt_int(ctx, false, v345, true, v376, v3);
                        let v837 = constructor_output_reg(ctx, v836);
                        // Rule at src/isa/riscv64/lower.isle line 875.
                        return Some(v837);
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v345 = C::put_in_reg(ctx, v170);
                        let v376 = C::value_type(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v840 = constructor_gen_fcvt_int(ctx, true, v345, false, v376, v3);
                        let v841 = constructor_output_reg(ctx, v840);
                        // Rule at src/isa/riscv64/lower.isle line 885.
                        return Some(v841);
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v345 = C::put_in_reg(ctx, v170);
                        let v376 = C::value_type(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v838 = constructor_gen_fcvt_int(ctx, true, v345, true, v376, v3);
                        let v839 = constructor_output_reg(ctx, v838);
                        // Rule at src/isa/riscv64/lower.isle line 880.
                        return Some(v839);
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v376 = C::value_type(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v849 = &C::int_convert_2_float_op(ctx, v376, false, v3);
                        let v843 = C::put_in_regs(ctx, v170);
                        let v850 =
                            constructor_normalize_fcvt_from_int(ctx, v843, v376, &ExtendOp::Zero);
                        let v851 = constructor_convert_valueregs_reg(ctx, v850);
                        let v852 = constructor_fpu_rr(ctx, v849, v3, v851);
                        let v853 = constructor_output_reg(ctx, v852);
                        // Rule at src/isa/riscv64/lower.isle line 895.
                        return Some(v853);
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v376 = C::value_type(ctx, v170);
                        let v3 = C::value_type(ctx, v2);
                        let v842 = &C::int_convert_2_float_op(ctx, v376, true, v3);
                        let v843 = C::put_in_regs(ctx, v170);
                        let v845 =
                            constructor_normalize_fcvt_from_int(ctx, v843, v376, &ExtendOp::Signed);
                        let v846 = constructor_convert_valueregs_reg(ctx, v845);
                        let v847 = constructor_fpu_rr(ctx, v842, v3, v846);
                        let v848 = constructor_output_reg(ctx, v847);
                        // Rule at src/isa/riscv64/lower.isle line 890.
                        return Some(v848);
                    }
                }
                &Opcode::Isplit => {
                    let v171 = C::put_in_regs(ctx, v170);
                    let v358 = C::value_regs_get(ctx, v171, 0x0);
                    let v706 = C::gen_move2(ctx, v358, I64, I64);
                    let v707 = C::put_in_regs(ctx, v170);
                    let v708 = C::value_regs_get(ctx, v707, 0x1);
                    let v709 = C::gen_move2(ctx, v708, I64, I64);
                    let v710 = C::value_reg(ctx, v706);
                    let v711 = C::value_reg(ctx, v709);
                    let v712 = C::output_pair(ctx, v710, v711);
                    // Rule at src/isa/riscv64/lower.isle line 731.
                    return Some(v712);
                }
                _ => {}
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v854,
            global_value: v855,
        } => {
            if let &Opcode::SymbolValue = v854 {
                let v856 = C::symbol_value_data(ctx, v855);
                if let Some(v857) = v856 {
                    let v861 = C::load_ext_name(ctx, v857.0, v857.2);
                    let v862 = constructor_output_reg(ctx, v861);
                    // Rule at src/isa/riscv64/lower.isle line 900.
                    return Some(v862);
                }
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v10,
            imm: v11,
        } => {
            if let &Opcode::F32const = v10 {
                let v12 = C::u32_from_ieee32(ctx, v11);
                let v14 = C::u32_as_u64(ctx, v12);
                let v15 = C::imm(ctx, F32, v14);
                let v16 = constructor_output_reg(ctx, v15);
                // Rule at src/isa/riscv64/lower.isle line 14.
                return Some(v16);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v17,
            imm: v18,
        } => {
            if let &Opcode::F64const = v17 {
                let v19 = C::u64_from_ieee64(ctx, v18);
                let v21 = C::imm(ctx, F64, v19);
                let v22 = constructor_output_reg(ctx, v21);
                // Rule at src/isa/riscv64/lower.isle line 19.
                return Some(v22);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = C::imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    // Rule at src/isa/riscv64/lower.isle line 9.
                    return Some(v9);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd.
pub fn constructor_match_shnadd<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            // Rule at src/isa/riscv64/lower.isle line 53.
            return Some(AluOPRRR::Sh1add);
        }
        0x2 => {
            // Rule at src/isa/riscv64/lower.isle line 54.
            return Some(AluOPRRR::Sh2add);
        }
        0x3 => {
            // Rule at src/isa/riscv64/lower.isle line 55.
            return Some(AluOPRRR::Sh3add);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd_uw.
pub fn constructor_match_shnadd_uw<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            // Rule at src/isa/riscv64/lower.isle line 75.
            return Some(AluOPRRR::Sh1adduw);
        }
        0x2 => {
            // Rule at src/isa/riscv64/lower.isle line 76.
            return Some(AluOPRRR::Sh2adduw);
        }
        0x3 => {
            // Rule at src/isa/riscv64/lower.isle line 77.
            return Some(AluOPRRR::Sh3adduw);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term gen_atomic_rmw_loop.
pub fn constructor_gen_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = constructor_gen_atomic_offset(ctx, arg2, arg1);
    let v8 = constructor_gen_atomic_p(ctx, arg2, arg1);
    let v9 = MInst::AtomicRmwLoop {
        offset: v7,
        op: arg0.clone(),
        dst: v5,
        ty: arg1,
        p: v8,
        x: arg3,
        t0: v6,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/lower.isle line 601.
    return v11;
}

// Generated as internal constructor for term gen_atomic_offset.
pub fn constructor_gen_atomic_offset<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, 0x3);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        let v7 = constructor_rv_slli(ctx, v6, v5);
        // Rule at src/isa/riscv64/lower.isle line 629.
        return v7;
    }
    let v8 = C::zero_reg(ctx);
    // Rule at src/isa/riscv64/lower.isle line 632.
    return v8;
}

// Generated as internal constructor for term gen_atomic_p.
pub fn constructor_gen_atomic_p<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, -0x4);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        // Rule at src/isa/riscv64/lower.isle line 636.
        return v6;
    }
    // Rule at src/isa/riscv64/lower.isle line 639.
    return arg0;
}

// Generated as internal constructor for term gen_icmp.
pub fn constructor_gen_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
    arg3: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Icmp {
        cc: arg0.clone(),
        rd: v5,
        a: arg1,
        b: arg2,
        ty: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/lower.isle line 847.
    return v8;
}
